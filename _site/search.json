[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "Xu Haiyang\n\n\nHello! I‚Äôm Xu Haiyang, a dedicated Computer Science graduate with a passion for Cybersecurity & Cyber-Physical Systems. Over the years, I‚Äôve immersed myself in the intricacies of IoT, AWS Cloud, and AI to develop innovative solutions that secure and optimize real-world applications. This website is a curated portfolio of my projects, research, and technical expertise. I hold a Bachelor of Science (Computer Science) (20 Jan 2025) Merit üéì.\nüîó View My Certification\n\n\n\n\n\nEducation:\n\nSingapore Management University (Aug 2021 ‚Äì Dec 2024) - BSc in Computer Science (Cybersecurity & CPS)\nSingapore Polytechnic (Mar 2018 ‚Äì Apr 2021) - Diploma in Computer Engineering\n\nCertifications: AWS Certified Solutions Architect\nProgramming Skills: JavaScript, R Coding, Python, ReactJS, Java, C/C++\nCybersecurity Skills: OWASP ZAP, SQL Injection Testing, IAM, Risk Management, Threat Intelligence\n\n\n\n\nThis website is structured into several sections to help visitors and myself find useful solutions:\n- Cyber Defense & Threat Intelligence: Articles and resources on security best practices, penetration testing, and risk management.\n- Mastering Code & Development: Code snippets, tutorials, and solutions for common programming challenges.\n- Cloud Computing & Scalability: Insights into AWS, serverless computing, and cloud security.\n- GitHub Mastery & DevOps: Guides on version control, GitHub Actions, and repository management.\n- AI & Machine Learning Innovations: Machine learning, deep learning, and AI-related projects.\n\n\n\n\nAWS Security & DevSecOps Automation (View Project) - Developed an automated security monitoring system using AWS Lambda, API Gateway, and Security Hub, reducing vulnerability resolution time and improving incident response efficiency.\nML-Powered Insider Threat Detection (View Project) ‚Äì Built a machine learning-driven anomaly detection system with TensorFlow and Scikit-learn, reducing false positives by 25% and enhancing security risk assessments at UBS AG.\nIoT-Enabled Industrial Automation (View Project) ‚Äì Designed and deployed IoT cloud solutions for real-time factory monitoring, ensuring 98% uptime by integrating AWS with industrial sensors.\nSmart Farming IoT System (View Project) ‚Äì Developed an IoT-driven smart farming dashboard with real-time data visualization and cloud integration, improving operational efficiency for 50+ farm operators.\n\n\n\n\n\nDeep Learning Week Hackathon (2022) - Led AI solution for real-time pedestrian and vehicle detection.\nLyve Cloud Hackathon (2022) - Developed cloud-based media streaming server.\n\n\n\n\nFeel free to connect with me on:\n- üìß Email: haiyang.xu.2021@scis.smu.edu.sg\n- üîó LinkedIn\n- üêô GitHub\n- üìÑ Download My Resume\n\n\nIn the AI era, cybersecurity professionals are the guardians of innovation, ensuring that technological advancements remain secure and trustworthy."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "Education:\n\nSingapore Management University (Aug 2021 ‚Äì Dec 2024) - BSc in Computer Science (Cybersecurity & CPS)\nSingapore Polytechnic (Mar 2018 ‚Äì Apr 2021) - Diploma in Computer Engineering\n\nCertifications: AWS Certified Solutions Architect\nProgramming Skills: JavaScript, R Coding, Python, ReactJS, Java, C/C++\nCybersecurity Skills: OWASP ZAP, SQL Injection Testing, IAM, Risk Management, Threat Intelligence"
  },
  {
    "objectID": "index.html#featured-projects",
    "href": "index.html#featured-projects",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "AWS Security Automation (View Project) - Implemented AWS Lambda, API Gateway, and Security Hub for real-time security analysis.\nInsider Threat Detection (View Project) - Built ML-based risk assessment using TensorFlow and Scikit Learn.\nIoT Smart System (View Project) - Designed IoT applications with AWS cloud connectivity."
  },
  {
    "objectID": "index.html#latest-blog-posts",
    "href": "index.html#latest-blog-posts",
    "title": "Welcome to My Tech Portfolio",
    "section": "",
    "text": "Understanding Zero Trust Security Model (Read More)\nDeploying Serverless Applications with AWS Lambda (Read More)\nIoT Device Hardening: Best Practices (Read More)"
  },
  {
    "objectID": "index.html#hackathons-achievements",
    "href": "index.html#hackathons-achievements",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "Deep Learning Week Hackathon (2022) - Led AI solution for real-time pedestrian and vehicle detection.\nLyve Cloud Hackathon (2022) - Developed cloud-based media streaming server."
  },
  {
    "objectID": "index.html#get-in-touch",
    "href": "index.html#get-in-touch",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "Feel free to connect with me on:\n- üìß Email: haiyang.xu.2021@scis.smu.edu.sg\n- üîó LinkedIn\n- üêô GitHub\n- üìÑ Download My Resume\n\n\nIn the AI era, cybersecurity professionals are the guardians of innovation, ensuring that technological advancements remain secure and trustworthy."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#explore-topics",
    "href": "index.html#explore-topics",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "This website is structured into several sections to help visitors and myself find useful solutions:\n- Cyber Defense & Threat Intelligence: Articles and resources on security best practices, penetration testing, and risk management.\n- Mastering Code & Development: Code snippets, tutorials, and solutions for common programming challenges.\n- Cloud Computing & Scalability: Insights into AWS, serverless computing, and cloud security.\n- GitHub Mastery & DevOps: Guides on version control, GitHub Actions, and repository management.\n- AI & Machine Learning Innovations: Machine learning, deep learning, and AI-related projects."
  },
  {
    "objectID": "ai.html",
    "href": "ai.html",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Below is a list of 20 commands (prompt techniques) you can use with ChatGPT to improve your research and work productivity. Each command includes a brief explanation and a copyable prompt.\n\n\nPrompt:\nSummarize the main achievements, challenges, and next steps from this week‚Äôs work on [project or task]. Include key technical details and highlight any roadblocks that need attention.\n\n\n\nPrompt:\nCreate a detailed weekly report template for a computer scientist. It should have sections for:\n\n1. Overview\n2. Accomplishments\n3. Challenges\n4. Metrics (e.g., code commits, bug fixes)\n5. Next steps and Action Items\n\nProvide a professional tone and clear formatting. \n\n\n\nPrompt:\nRewrite the following technical update for a non-technical audience: [insert detailed technical update]. Focus on explaining the key points in simple, concise language. \n\n\n\nPrompt:\nTurn these bullet points into a well-structured weekly report:\n\n1. Completed module integration\n2. Fixed critical bugs in feature X\n3. Coordinated with the testing team\n4. Planning for performance improvements next week \n\n\n\nPrompt:\nDraft a weekly report focusing on performance metrics for [specific project]. Include quantitative data (e.g., number of commits, test coverage, processing speed improvements) and interpret these metrics for stakeholders.\n\n\n\nPrompt:\nList all critical bugs you fixed this week along with their impact on system performance. Then, summarize the overall improvement in system stability and any residual issues that need follow-up.\n\n\n\nPrompt:\nDraft a report outlining new features introduced during the week. Include technical details, the challenges you faced during implementation, and potential areas for further enhancement.\n\n\n\nPrompt:\nCreate a timeline of major tasks and milestones achieved this week. For each milestone, provide a brief description of the work done, any obstacles encountered, and the expected next steps. \n\n\n\nPrompt:\nSummarize your interactions with other teams or departments this week. Highlight the feedback received, any tasks delegated or shared, and outline any pending follow-ups that require additional coordination. \n\n\n\nPrompt:\nPrepare a performance analytics report for the week. Include quantitative data such as code commits, review metrics, test coverage improvements, and any benchmark results. Interpret these metrics in a way that highlights progress and areas needing improvement. \n\n\n\nPrompt:\nDetail any new skills learned or training sessions attended during the week. Explain how these insights have been applied to current projects or how they might improve future work. \n\n\n\nPrompt:\nIdentify any potential risks or issues encountered during the week, explain their potential impact on the project, and describe the mitigation strategies you implemented or propose for the future.\n\n\n\nPrompt:\nSummarize all tasks and projects completed this week, including a brief note on how each task contributed to broader project milestones. Highlight any tasks that are still in progress and outline the next steps. \n\n\n\nPrompt:\nUpdate your project roadmap based on this week‚Äôs progress. Identify any adjustments made to timelines or priorities, and explain the reasons behind these changes. \n\n\n\nPrompt:\nDraft a brief retrospective for the week: What went well? What didn‚Äôt? Include insights on how you plan to improve processes or overcome obstacles in the coming weeks. \n\n\n\nPrompt:\nDescribe how your work this week contributed to overall business value. Highlight any cost savings, efficiency improvements, or innovative contributions that directly support your organization‚Äôs strategic goals. \n\n\n\nPrompt:\nSummarize the technical debt issues addressed during the week. Explain the refactoring or improvements made, and how these efforts enhance code quality and system maintainability. \n\n\n\nPrompt:\nDocument any feedback received from code reviews, user testing, or stakeholder meetings. Outline how you are incorporating this feedback into future iterations to improve project outcomes.  \n\n\n\nPrompt:\nDetail how your time and resources were distributed across different tasks this week. Include any challenges with resource constraints and describe strategies implemented to manage these effectively.\nExplanation: Provides concise historical overviews.\n\n\n\nPrompt:\nReport on any experimental techniques, prototypes, or innovative ideas you explored this week. Discuss their potential benefits or risks and propose actionable next steps for further investigation."
  },
  {
    "objectID": "ai.html#summarize-content",
    "href": "ai.html#summarize-content",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nSummarize the following text: [insert text]  \nExplanation: Quickly distills lengthy articles or reports into a concise summary."
  },
  {
    "objectID": "ai.html#explain-like-im-5-eli5",
    "href": "ai.html#explain-like-im-5-eli5",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nExplain [concept] like I‚Äôm 5.  \nExplanation: Breaks down complex topics into simple, easy-to-understand language."
  },
  {
    "objectID": "ai.html#act-as-role",
    "href": "ai.html#act-as-role",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nAct as a [research assistant/expert in renewable energy/etc.].  \nExplanation: Guides ChatGPT to respond in the tone and style of a specified expert."
  },
  {
    "objectID": "ai.html#generate-an-outline-or-plan",
    "href": "ai.html#generate-an-outline-or-plan",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nGenerate an outline for a report on [topic].  \nExplanation: Creates a structured blueprint for projects, articles, or presentations."
  },
  {
    "objectID": "ai.html#list-pros-and-cons",
    "href": "ai.html#list-pros-and-cons",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nList the pros and cons of [subject].  \nExplanation: Helps evaluate options by comparing benefits and drawbacks."
  },
  {
    "objectID": "ai.html#compare-items",
    "href": "ai.html#compare-items",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nCompare [option A] and [option B].  \nExplanation: Provides a side-by-side comparison for decision-making."
  },
  {
    "objectID": "ai.html#translate-text",
    "href": "ai.html#translate-text",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nTranslate the following text to [language]: [insert text].  \nExplanation: Converts text into different languages, aiding localization."
  },
  {
    "objectID": "ai.html#rewrite-in-simpler-language",
    "href": "ai.html#rewrite-in-simpler-language",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nRewrite this text in simpler language: [insert text].  \nExplanation: Makes technical or dense content more accessible."
  },
  {
    "objectID": "ai.html#brainstorm-ideas",
    "href": "ai.html#brainstorm-ideas",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nBrainstorm creative ideas for [project/topic].  \nExplanation: Generates innovative ideas to overcome creative blocks."
  },
  {
    "objectID": "ai.html#step-by-step-guides",
    "href": "ai.html#step-by-step-guides",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nGive me a step-by-step guide on how to [task].  \nExplanation: Breaks down tasks into clear, actionable steps."
  },
  {
    "objectID": "ai.html#find-alternative-words-thesaurus",
    "href": "ai.html#find-alternative-words-thesaurus",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nGive me synonyms for [word].  \nExplanation: Helps find alternative words for better phrasing."
  },
  {
    "objectID": "ai.html#code-explanation",
    "href": "ai.html#code-explanation",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nExplain this code: [insert code].  \nExplanation: Breaks down and explains code snippets in simple terms."
  },
  {
    "objectID": "ai.html#debug-code",
    "href": "ai.html#debug-code",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nFind and fix errors in this code: [insert code].  \nExplanation: Identifies and corrects errors in programming code."
  },
  {
    "objectID": "ai.html#generate-sample-text",
    "href": "ai.html#generate-sample-text",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nGenerate a sample paragraph about [topic].  \nExplanation: Creates placeholder or draft text for various needs."
  },
  {
    "objectID": "ai.html#create-a-study-plan",
    "href": "ai.html#create-a-study-plan",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nCreate a study plan for learning [subject] in [timeframe].  \nExplanation: Helps organize study schedules effectively."
  },
  {
    "objectID": "ai.html#extract-key-information",
    "href": "ai.html#extract-key-information",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nExtract the key points from this text: [insert text].  \nExplanation: Pulls out essential details from dense information."
  },
  {
    "objectID": "ai.html#generate-a-to-do-list",
    "href": "ai.html#generate-a-to-do-list",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nCreate a to-do list for [goal/project].  \nExplanation: Structures tasks efficiently for productivity."
  },
  {
    "objectID": "ai.html#convert-text-format",
    "href": "ai.html#convert-text-format",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nConvert this text to bullet points: [insert text].  \nExplanation: Reformats text into easier-to-read structures."
  },
  {
    "objectID": "ai.html#historical-events-summary",
    "href": "ai.html#historical-events-summary",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nSummarize the major events of [historical period].  \nExplanation: Provides concise historical overviews."
  },
  {
    "objectID": "ai.html#generate-email-templates",
    "href": "ai.html#generate-email-templates",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nWrite a professional email for [purpose].  \nExplanation: Creates well-structured emails for professional use."
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git clone &lt;repository_url&gt;\nExplanation: This command creates a local copy of the remote repository. Replace &lt;repository_url&gt; with the actual URL of the repository you want to clone (e.g., https://github.com/user/repo.git).\n\n\n\ngit status\nExplanation: This command shows the current status of your working directory and staging area, including changes that are staged for commit and those that are not.\n\n\n\ngit add &lt;file_or_directory&gt;\nExplanation: This command stages changes for the next commit. Replace &lt;file_or_directory&gt; with the file or directory you want to stage. To stage all changes, use git add ..\n\n\n\ngit commit -m \"Your commit message\"\nExplanation: This command commits the staged changes to the repository with a message describing the changes. Replace \"Your commit message\" with a brief but descriptive message.\n\n\n\ngit log\nExplanation: This command shows the commit history, listing all commits made in the repository, along with their details such as author, date, and commit message.\n\n\n\ngit push origin &lt;branch_name&gt;\nExplanation: This command uploads your local commits to the remote repository. Replace &lt;branch_name&gt; with the branch you‚Äôre working on (e.g., main or develop).\n\n\n\ngit pull origin &lt;branch_name&gt;\nExplanation: This command fetches and merges changes from the remote repository into your local repository. Replace &lt;branch_name&gt; with the name of the branch you want to pull from (usually main).\n\n\n\ngit checkout -b &lt;new_branch_name&gt;\nExplanation: This command creates and switches to a new branch. Replace &lt;new_branch_name&gt; with the name you want for the new branch.\n\n\n\ngit checkout &lt;branch_name&gt;\nExplanation: This command switches to an existing branch. Replace &lt;branch_name&gt; with the name of the branch you want to switch to.\n\n\n\ngit merge &lt;branch_name&gt;\nExplanation: This command merges changes from another branch into your current branch. Replace &lt;branch_name&gt; with the branch you want to merge.\n\n\n\ngit branch -d &lt;branch_name&gt;\nExplanation: This command deletes a local branch. Replace &lt;branch_name&gt; with the name of the branch you want to delete.\n\n\n\ngit remote -v\nExplanation: This command shows the URLs of the remote repositories associated with your local repository.\n\n\n\ngit remote add origin &lt;repository_url&gt;\nExplanation: This command adds a remote repository to your local repository. Replace &lt;repository_url&gt; with the actual URL of the remote repository.\n\n\n\ngit reset --hard\nExplanation: This command resets your working directory and staging area to the last commit, discarding any uncommitted changes.\n\n\n\ngit diff\nExplanation: This command shows the differences between the working directory and the staging area, or between two commits.\n\n\n\ngit stash\nExplanation: This command temporarily saves your changes, allowing you to work on something else without committing those changes.\n\n\n\ngit tag &lt;tag_name&gt;\nExplanation: This command creates a tag for a specific commit. Replace &lt;tag_name&gt; with the name of the tag (e.g., v1.0).\n\n\n\ngit push origin &lt;tag_name&gt;\nExplanation: This command pushes the tag to the remote repository.\n\n\n\ngit push origin --delete &lt;branch_name&gt;\nExplanation: This command deletes a branch from the remote repository.\n\n\n\ngh issue list\nExplanation: This command lists open issues in a GitHub repository (requires the GitHub CLI). You can filter, view, and manage issues directly from the terminal.\n\n\n\ngh issue create\nExplanation: This command creates a new GitHub issue (requires the GitHub CLI). Follow the prompts to enter the issue title, description, and labels."
  },
  {
    "objectID": "github.html#cloning-a-repository",
    "href": "github.html#cloning-a-repository",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git clone &lt;repository_url&gt;\nExplanation: This command creates a local copy of the remote repository. Replace &lt;repository_url&gt; with the actual URL of the repository you want to clone (e.g., https://github.com/user/repo.git)."
  },
  {
    "objectID": "github.html#checking-repository-status",
    "href": "github.html#checking-repository-status",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git status\nExplanation: This command shows the current status of your working directory and staging area, including changes that are staged for commit and those that are not."
  },
  {
    "objectID": "github.html#adding-changes-to-staging-area",
    "href": "github.html#adding-changes-to-staging-area",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git add &lt;file_or_directory&gt;\nExplanation: This command stages changes for the next commit. Replace &lt;file_or_directory&gt; with the file or directory you want to stage. To stage all changes, use git add .."
  },
  {
    "objectID": "github.html#committing-changes",
    "href": "github.html#committing-changes",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git commit -m \"Your commit message\"\nExplanation: This command commits the staged changes to the repository with a message describing the changes. Replace \"Your commit message\" with a brief but descriptive message."
  },
  {
    "objectID": "github.html#viewing-commit-history",
    "href": "github.html#viewing-commit-history",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git log\nExplanation: This command shows the commit history, listing all commits made in the repository, along with their details such as author, date, and commit message."
  },
  {
    "objectID": "github.html#pushing-changes-to-a-remote-repository",
    "href": "github.html#pushing-changes-to-a-remote-repository",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git push origin &lt;branch_name&gt;\nExplanation: This command uploads your local commits to the remote repository. Replace &lt;branch_name&gt; with the branch you‚Äôre working on (e.g., main or develop)."
  },
  {
    "objectID": "github.html#pulling-latest-changes-from-remote",
    "href": "github.html#pulling-latest-changes-from-remote",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git pull origin &lt;branch_name&gt;\nExplanation: This command fetches and merges changes from the remote repository into your local repository. Replace &lt;branch_name&gt; with the name of the branch you want to pull from (usually main)."
  },
  {
    "objectID": "github.html#creating-a-new-branch",
    "href": "github.html#creating-a-new-branch",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git checkout -b &lt;new_branch_name&gt;\nExplanation: This command creates and switches to a new branch. Replace &lt;new_branch_name&gt; with the name you want for the new branch."
  },
  {
    "objectID": "github.html#switching-branches",
    "href": "github.html#switching-branches",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git checkout &lt;branch_name&gt;\nExplanation: This command switches to an existing branch. Replace &lt;branch_name&gt; with the name of the branch you want to switch to."
  },
  {
    "objectID": "github.html#merging-a-branch",
    "href": "github.html#merging-a-branch",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git merge &lt;branch_name&gt;\nExplanation: This command merges changes from another branch into your current branch. Replace &lt;branch_name&gt; with the branch you want to merge."
  },
  {
    "objectID": "github.html#deleting-a-branch",
    "href": "github.html#deleting-a-branch",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git branch -d &lt;branch_name&gt;\nExplanation: This command deletes a local branch. Replace &lt;branch_name&gt; with the name of the branch you want to delete."
  },
  {
    "objectID": "github.html#viewing-remote-repositories",
    "href": "github.html#viewing-remote-repositories",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git remote -v\nExplanation: This command shows the URLs of the remote repositories associated with your local repository."
  },
  {
    "objectID": "github.html#adding-a-remote-repository",
    "href": "github.html#adding-a-remote-repository",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git remote add origin &lt;repository_url&gt;\nExplanation: This command adds a remote repository to your local repository. Replace &lt;repository_url&gt; with the actual URL of the remote repository."
  },
  {
    "objectID": "github.html#resetting-changes",
    "href": "github.html#resetting-changes",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git reset --hard\nExplanation: This command resets your working directory and staging area to the last commit, discarding any uncommitted changes."
  },
  {
    "objectID": "github.html#viewing-differences-between-versions",
    "href": "github.html#viewing-differences-between-versions",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git diff\nExplanation: This command shows the differences between the working directory and the staging area, or between two commits."
  },
  {
    "objectID": "github.html#stashing-changes",
    "href": "github.html#stashing-changes",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git stash\nExplanation: This command temporarily saves your changes, allowing you to work on something else without committing those changes."
  },
  {
    "objectID": "github.html#creating-a-tag",
    "href": "github.html#creating-a-tag",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git tag &lt;tag_name&gt;\nExplanation: This command creates a tag for a specific commit. Replace &lt;tag_name&gt; with the name of the tag (e.g., v1.0)."
  },
  {
    "objectID": "github.html#pushing-tags-to-remote",
    "href": "github.html#pushing-tags-to-remote",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git push origin &lt;tag_name&gt;\nExplanation: This command pushes the tag to the remote repository."
  },
  {
    "objectID": "github.html#deleting-a-remote-branch",
    "href": "github.html#deleting-a-remote-branch",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "git push origin --delete &lt;branch_name&gt;\nExplanation: This command deletes a branch from the remote repository."
  },
  {
    "objectID": "github.html#viewing-github-issues",
    "href": "github.html#viewing-github-issues",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "gh issue list\nExplanation: This command lists open issues in a GitHub repository (requires the GitHub CLI). You can filter, view, and manage issues directly from the terminal."
  },
  {
    "objectID": "github.html#creating-a-github-issue",
    "href": "github.html#creating-a-github-issue",
    "title": "Useful GitHub Commands",
    "section": "",
    "text": "gh issue create\nExplanation: This command creates a new GitHub issue (requires the GitHub CLI). Follow the prompts to enter the issue title, description, and labels."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Me",
    "section": "",
    "text": "Let‚Äôs Connect!\n\nEmail: üìß haiyang.xu.2021@scis.smu.edu.sg\nPhone: üì± +65 8090 8720\nLinkedIn: üîó Haiyang Xu\nResume: üìÑ Download my Resume"
  },
  {
    "objectID": "cloud.html",
    "href": "cloud.html",
    "title": "AWS Solution Architect Summary",
    "section": "",
    "text": "Number of Edge Locations &gt; Number of Availability zones &gt; Number of regions\n\nA region is a physical location spread across globe to host your data to reduce latency. In each region there will be at least two availability zones.\nAn availability zone is a datacenter that does not need to be separated by multiple kilometers physically but by meters with in a physical compound which are completely isolated from each other failure such as power, network in a given AZ.\nAn edge location is where end users access services located at AWS. A site that CloudFront uses to cache copies of your content for faster delivery to users at any location. Edge locations serve requests for CloudFront and Route 53. Requests going to either one of these services will be routed to the nearest edge location automatically."
  },
  {
    "objectID": "cloud.html#the-basics-regions-availability-zones-edge-locations",
    "href": "cloud.html#the-basics-regions-availability-zones-edge-locations",
    "title": "AWS Solution Architect Summary",
    "section": "",
    "text": "Number of Edge Locations &gt; Number of Availability zones &gt; Number of regions\n\nA region is a physical location spread across globe to host your data to reduce latency. In each region there will be at least two availability zones.\nAn availability zone is a datacenter that does not need to be separated by multiple kilometers physically but by meters with in a physical compound which are completely isolated from each other failure such as power, network in a given AZ.\nAn edge location is where end users access services located at AWS. A site that CloudFront uses to cache copies of your content for faster delivery to users at any location. Edge locations serve requests for CloudFront and Route 53. Requests going to either one of these services will be routed to the nearest edge location automatically."
  },
  {
    "objectID": "cloud.html#how-to-create-a-role",
    "href": "cloud.html#how-to-create-a-role",
    "title": "AWS Solution Architect Summary",
    "section": "How to create a Role",
    "text": "How to create a Role\n\nIAM &gt; Roles &gt; Create Role\nChoose the service that will use this role\nAttach policies\n\n\nRoles are more secure than storing your access key and secret access key on individual EC2 instances.\nRoles are easier to manage.\nRoles can be assigned to an EC2 instance after it is created using both the console and command line.\nRoles are universal - you can use them in any region."
  },
  {
    "objectID": "cloud.html#create-a-billing-alarm",
    "href": "cloud.html#create-a-billing-alarm",
    "title": "AWS Solution Architect Summary",
    "section": "Create a billing alarm",
    "text": "Create a billing alarm\n\nGo to My Account &gt; Billing Dashboard &gt; Billing Preferences\nEnable Receive Billing Alarts\nThen, go to Services &gt; Cloud Watch &gt; Billing\nFill the Billing alarm section (with the amount of dollars)"
  },
  {
    "objectID": "cloud.html#storage-classes",
    "href": "cloud.html#storage-classes",
    "title": "AWS Solution Architect Summary",
    "section": "Storage Classes",
    "text": "Storage Classes\n\nS3 Standard\nS3 IA: Infrequently Accessed but requires rapid access. Lower fee then standard, but you‚Äôre charged a retrieval fee.\nS3 One Zone - IA: Infrequently Accessed and do not require the multiple availability zones. Lowest option.\nS3 Intelligent Tiering: Use machine learning to configure the objects around storage classes to the most cost-effective option.\nS3 Glacier: For data archiving. Secure, durable, low-cost storage. Retrieval times configurable from minutes to hours.\nS3 Glacier Deep Archive: Same as above but it allows retrieval times of 12 hours."
  },
  {
    "objectID": "cloud.html#transfer-acceleration",
    "href": "cloud.html#transfer-acceleration",
    "title": "AWS Solution Architect Summary",
    "section": "Transfer Acceleration",
    "text": "Transfer Acceleration\nAmazon S3 Transfer Acceleration enables fast, easy, and secure transfer of files over long distances between your end users and an S3 bucket. It takes advantage of Amazon CloudFront‚Äôs globally distributed edge locations: as the data arrives at an edge location, data is routed to Amazon S3 over an optimized network path."
  },
  {
    "objectID": "cloud.html#security",
    "href": "cloud.html#security",
    "title": "AWS Solution Architect Summary",
    "section": "Security",
    "text": "Security\nWe can configure S3 to log who is accessing the objects. Secure your data using access control lists or using bucket policies.\nWe can encrypt by:\n\nEncryption In Transit: SSL/TLS\nEncryption At Rest (Server Side) via (1) S3 Managed Keys - SSE-S3, (2) AWS Key Management Service - SS3-KMS, or (3) Server Side Encryption with customer - SS3-C (you provide the keys).\nClient Side Encryption"
  },
  {
    "objectID": "cloud.html#cross-region-replication",
    "href": "cloud.html#cross-region-replication",
    "title": "AWS Solution Architect Summary",
    "section": "Cross Region Replication",
    "text": "Cross Region Replication\nIn order to replicate your data in different regions.\n\nCreate bucket\nGo to Management and Replication\nEnable versioning (it must be enabled in both source and destination)\nSet Source and Destination\nConfiguration options: select/create the role\n\nFiles in an existing bucket and delete markers (or versions) are not replicated automatically. It only works for new files."
  },
  {
    "objectID": "cloud.html#pricing",
    "href": "cloud.html#pricing",
    "title": "AWS Solution Architect Summary",
    "section": "Pricing",
    "text": "Pricing\n\nBy Storage class\nBy Requests\nBy Storage Management Pricing\nBy Data Transfer Pricing\nBy Transfer Acceleration\nBy Cross Region Replication Pricing"
  },
  {
    "objectID": "cloud.html#pricing-1",
    "href": "cloud.html#pricing-1",
    "title": "AWS Solution Architect Summary",
    "section": "Pricing",
    "text": "Pricing\n\n\n\n\n\n\n\n\nType\nDescription\nUse Cases\n\n\n\n\nOn Demand\nFixed rate by the hour (or by the second)\nLow cost and flexibility. (1) Applications with short term, spiky or unpredictable workloads that cannot be interrupted. (2) Applications being developed or tested for the first time.\n\n\nReserved: Standard or Convertible or Scheduled\nProvides you with a capacity reservation, and offer a significant discount on the hourly charge for an instance. Contract terms are 1 year or 3 years.\n(1) Applications with steady state or predictable usage. (2) Applications that require reserved capacity. (3) Users able to male upfront payments to reduce their total computing costs even further.\n\n\nSpot\nEnables you to bid whatever price you want for instance capacity, providing for even greater savings if your applications have flexible start and end times.\n(1) Applications that have flexible start and end times. (2) Applications that are only feasible at very low compute prices. (3) Users with urgent computing needs for large amounts of additional capacity.\n\n\nDedicated hosts\nPhysical EC2 server dedicated. It can help you reduce costs by allowing you to use your existing server-bound software licenses. It can be purchased On-Demand (hourly) or as a reservation for up to 70% off the On-Demand price.\n(1) Useful for regulatory requirements that may not support multi-tenant virtualization. (2) Great for licensing which does not support multi-tenancy or cloud deployments."
  },
  {
    "objectID": "cloud.html#instance-types",
    "href": "cloud.html#instance-types",
    "title": "AWS Solution Architect Summary",
    "section": "Instance Types",
    "text": "Instance Types\n\nThis won‚Äôt be part of the exam. The summary is:\n\nF: For FPGA\nI: For IOPS\nG: Graphics\nH: High Disk Throughput\nT: Cheap general purpose\nD: For Density\nR: For RAM\nM: Main choice for general purpose apps\nC: For Compute\nP: Graphics (think Pics)\nX: Extreme Memory\nZ: Extreme Memory and CPU\nA: ARM-Based workloads\nU: Bare Metal"
  },
  {
    "objectID": "cloud.html#placement-groups",
    "href": "cloud.html#placement-groups",
    "title": "AWS Solution Architect Summary",
    "section": "Placement Groups",
    "text": "Placement Groups\nThe name of placement groups must be unique within your AWS account. Only certain types of instances can be launched in a placement group: compute optimized, GPU, memory optimized and storage optimized. We can‚Äôt move existing instances into a placement group (they must be selected when are being created).\n\nClustered Placement Group: group instances within a single availability zone. This is recommended for applications that need low network latency, high network throughput or both. Only certain instances can be launched in this mode.\nSpread Placement Group: This is the opposite. Instances that are each placed on distinct underlying hardware. This is recommended for applications that have a small number of critical instances that should be kept separate from each other."
  },
  {
    "objectID": "cloud.html#ebs-backed-versus-instance-store",
    "href": "cloud.html#ebs-backed-versus-instance-store",
    "title": "AWS Solution Architect Summary",
    "section": "EBS-Backed Versus Instance Store",
    "text": "EBS-Backed Versus Instance Store\nAn instance store provides temporary block-level storage for your instance. Instance Store Volumes are sometimes called Ephemeral Storage. This storage is located on disks that are physically attached to the host computer. Instance store is ideal for temporary storage of information that changes frequently, such as buffers, caches, scratch data, and other temporary content, or for data that is replicated across a fleet of instances, such as a load-balanced pool of web servers.\n\nInstance store volumes cannot be stopped. If the underlying host fails, you will lose your data.\n\nAn ‚ÄúEBS-backed‚Äù instance is an EC2 instance which uses an EBS volume as it‚Äôs root device. EBS volumes are redundant, ‚Äúvirtual‚Äù drives, which are not tied to any particular hardware, however they are restricted to a particular EC2 availability zone. This means that an EBS volume can move from one piece of hardware to another within the same availability zone. You can think of EBS volumes as a kind of Network Attached Storage.\nIf the virtual machine‚Äôs hardware fails, the EBS volume can simply be moved to another virtual machine and re-launched. In theory, you won‚Äôt lose any data.\nAnother benefit is that EBS volumes can easily be backed up and duplicated. So you can take easy backup snapshots of your volumes, create new volumes and launch new EC2 instances based on those duplicate volumes.\n\nEBS backed instances can be stopped. You won‚Äôt lose the data on this instance if it is stopped.\nBy default, both root volumes will be deleted on termination. However, with EBS volumes, you can tell AWS to keep the device volume."
  },
  {
    "objectID": "cloud.html#backups",
    "href": "cloud.html#backups",
    "title": "AWS Solution Architect Summary",
    "section": "Backups",
    "text": "Backups\nAutomated backups allow you to recover your database to any point in time within a ‚Äúretention period‚Äù. The retention period can be between one and 35 days. Automated backups will take a full daily snapshot and will also store transaction logs throughout the day. When you do a recovery, AWS will first choose the most recent daily back up, and then apply transaction logs relevant to that day. This allows you to do a point in time recovery down to a second, within the retention period.\nAutomated backups are enabled by default. The backup data is stored in S3 and you get free storage space equal to the size of your database. So if you have and RDS instance of 10GB, you will get 10GB worth of storage.\nBackups are taken within a defined window, storage I/O may be suspended while your data is being backed up and you may experience elevated latency."
  },
  {
    "objectID": "cloud.html#snapshots",
    "href": "cloud.html#snapshots",
    "title": "AWS Solution Architect Summary",
    "section": "Snapshots",
    "text": "Snapshots\nDatabase snapshots are done manually. They are stored even after you delete the original RDS instance, unlike automated backups."
  },
  {
    "objectID": "cloud.html#restoring",
    "href": "cloud.html#restoring",
    "title": "AWS Solution Architect Summary",
    "section": "Restoring",
    "text": "Restoring\nWhenever you restore either a backup or a snapshot, the restored version of the database will be a new RDS instance with a new DNS endpoint."
  },
  {
    "objectID": "cloud.html#aurora",
    "href": "cloud.html#aurora",
    "title": "AWS Solution Architect Summary",
    "section": "Aurora",
    "text": "Aurora\nAmazon Aurora is a MySQL-compatible relational database that combines the speed and availability of high-end commercial databases with the simplicity and cost-effectiveness of open source database. It provides up to five times better performance than MySQL at better price for similar performance.\n\nStart with 10GB, scales in 10GB increments to 64TB (storage autoscaling).\nCompute resources can scale up to 32vCPUs and 244GB of Memory. It is designed to transparently handle the loss of up to two copies of data without affecting database write availability and up to three copies without affecting read availability.\nIt always maintain 2 copies in each availability zone with a minimum of 3 availability zones. 6 copies of your data.\nAurora storage is also self-healing. Data blocks and disks are continuously scanned for errors and automatically repaired.\nBackups are always enabled and do not impact on database performance.\nWe can take snapshots and share them with other AWS accounts.\n2 types of replicas available: aurora replicas and MySQL replicas. Automated failover is only available with Aurora replicas."
  },
  {
    "objectID": "cloud.html#register-a-new-domain",
    "href": "cloud.html#register-a-new-domain",
    "title": "AWS Solution Architect Summary",
    "section": "Register a new domain:",
    "text": "Register a new domain:\n\nGo to Route53 &gt; Register Domain\nSearch for your domain\nFill out the registrant contact\nPurchase your new domain\n\nIt takes some time to register the domain‚Ä¶ between a few hours up to 3 days."
  },
  {
    "objectID": "cloud.html#routing-policies",
    "href": "cloud.html#routing-policies",
    "title": "AWS Solution Architect Summary",
    "section": "Routing Policies",
    "text": "Routing Policies\nFirst, let‚Äôs see how to configure routing policies:\n\nGo to Route53 &gt; Your domain\nCreate Record Set\nSelect the DNS record type.\n\nAlso, we can set health checks on individual record sets. If a record set fails a health check it will be removed from Route53 until it passes the health check. We can set SNS notifications to alert you if health check is failing.\n\nSimple Routing Policy\n\nOne record with multiple IP addresses. If you specify multiple values in a record, Route53 returns all values to the user in a random order.\n\nWeighted Routing Policy\n\nAllows you split your traffic based on different weights assigned. For example, you can set 10% of your traffict to go to US-EAST-1 and 90% to EU-WEST-1.\n\nLetancy Routing Policy\n\nAllows you to route your traffic based on the lowest network latency for your end user (ie which region will give them the fastest response time).\nTo use latency-based routing, we need to create a latency resource record set for EC2 or ELB resource in each region that hosts your website.\n\nFallover Routing Policy\n\nThis is used when you want to create an active/passive set up. For example, you may want your primary site to be in EU-WEST-2 and your secondary DR Site in AP-SOUTHEAST-2. Route53 will monitor the health or your primary site using health checks.\n\nGeolocation Routing Policy\n\nDepending on our final users location.\n\nGeoproximity Routing Policy (Traffict Flow Only)\n\nGeoproximity routing lets Route53 route traffic to your resources based on the geographic location of your users and your resources. You can also optionally choose to route more traffic or less to a given resource by specifying a value, known as a bias. A bias expands or shrinks the size of the geographic region from which traffic ir routed to a resource.\n\nMultivalue Answer Policy\n\nIt lets you configure Route53 to return multiple values, such as IP addresses for your web servers, in response to DNS queries. You can specify multiple values for almost any record, but multivalue answer routing also lets you check the health of each resource, so Route53 returns only values for healthy resources.\nSimilar to simple routing but with health checks on each record set."
  },
  {
    "objectID": "cloud.html#default-vpc-vs-custom-vpc",
    "href": "cloud.html#default-vpc-vs-custom-vpc",
    "title": "AWS Solution Architect Summary",
    "section": "Default VPC vs Custom VPC",
    "text": "Default VPC vs Custom VPC\n\nDefault VPC is user friendly, allowing you to immediately deploy instances.\nAll Subnets in default VPC have a route out to the internet.\nEach EC2 instance has both a public and private IP address."
  },
  {
    "objectID": "cloud.html#vpc-peering-vpc-vpc",
    "href": "cloud.html#vpc-peering-vpc-vpc",
    "title": "AWS Solution Architect Summary",
    "section": "VPC Peering (VPC <‚Äì> VPC)",
    "text": "VPC Peering (VPC &lt;‚Äì&gt; VPC)\nAllows you to connect one VPC with another via a direct network route using private IP addresses. Instances behave as if they were on the same private network. We can peer VPC‚Äôs with other AWS accounts as well as with other VPCs in the same account. Peering is a star configuration: 1 central VPC peers with 4 others: no transitive peering!!"
  },
  {
    "objectID": "cloud.html#how-to",
    "href": "cloud.html#how-to",
    "title": "AWS Solution Architect Summary",
    "section": "How-To",
    "text": "How-To\n\nGo To VPC service &gt; Your VPCs &gt; Create VPC\nFill IPv4 CIDR block and tenancy and click on create.\n\nNo subnets and internet gateways have been created at this moment. Route table, network ACLs and security groups have been created. Security groups can‚Äôt span VPCs.\n\nGo to Subnets -&gt; Create subnet\nName it, select our VPC, the availability zone and the IPv4 CIDR block. Finally, click on create.\n\nBy default, no subnet has public IP. In order to do this, select the subnet and click on actions and make it auto apply public IP. Amazon always reserve 5 IP addresses with your subnets.\n\nGo to Internet Gateways -&gt; Create internet gateway\nName it and click on create.\nSelect it and with actions, attach the internet gateway to the VPC. (Only ONLY VPC can be attached to ONE internet gateway)\n\nAt the moment, all our VPC are public because our routes allow it. Let‚Äôs fix this:\n\nGo to Route Tables -&gt; select our route table and select ‚ÄúRoutes‚Äù\nEdit routes\nFill destination (any IP) with target internet gateway\nGo to Subnet Associations\nEdit subnet associations in order to select the subnet that needs to be public.\n\nNow, we can‚Äôt ssh-access to our private ec2 instance from our public subnet.\n\nGo to EC2 &gt; Security Groups -&gt; Create Security Group\nSelect our VPC, type ‚ÄúAll ICMP‚Äù (protocol ICMP) and the source the public subnet.\nSelect our VPC, type ‚ÄúSSH‚Äù and the source the private subnet.\nChange the security group of our ec2 instance."
  },
  {
    "objectID": "cloud.html#how-to-connect-to-our-instances",
    "href": "cloud.html#how-to-connect-to-our-instances",
    "title": "AWS Solution Architect Summary",
    "section": "How to connect to our instances?",
    "text": "How to connect to our instances?\nIn order to install/update software, we can use the Network Address Translation:\n\nNetwork Address Translation (NAT): via NAT instance of via NAT gateway\nThis will allow private instances to download software (via yum) without becaming publicly exposed. For this, we need to make our private instance a NAT instance. This NAT instance will communicate with a NAT Gateway, so we need to change the source/destination check in order to replace the ‚Äúinternet‚Äù gateway by our NAT gateway‚Äù.\nThen, we need to go to VPC &gt; Create NAT Gateway &gt; Create. Then, select the public subnet and create a elastic IP address. Finally, we need to go to VPC &gt; Routes and add a route to route all the IP addresses to a NAT gateway.\nAbout NAT instance:\n\nNAT instances must be in a public subnet.\nThere must be a route out of the private subnet to the NAT instance, in order for this to work.\nThe amount of traffict that NAT instances can support depends on the instance size. If you are bottlenecking, increase the instance size.\nYou can create high availability using autoscaling groups, multiple subnets in different AZs, and a script to automate failover.\n\nAbout NAT gateway:\n\nNAT Gateways are redundant inside the Availability Zone. One NAT gateway per availability zone.\nPreferred by the enterprise.\nStarts at 5Gbps and scales currently up to 45 Gbps.\nNo need to patch\nNot associated with security groups.\nAutomatically assigned a public IP address.\nNo needed to disable the source/destination check.\nIn order to have high availability, we should create a NAT gateway in each availability zone.\n\n\n\nBastion\n\nA Bastion is used to securely administer EC2 instances (using ssh or RDP. Bastions are called Jump Boxes in Australia).\nWe cannot use a NAT Gateway as a Bastion host.\n\n\n\nDirect Connect\nAWS Direct Connect is a cloud service solution that makes it easy to establish a dedicated network connection from your premises to AWS. Therefore, we can establish private connectivity between AWS and your datacenter, office, or colocation environment, which in many cases can reduce your network costs, increase bandwidth throughput and provide a more consistent network experience than Internet-based connections.\n\n\nVPC Endpoint\nAn interface endpoint is an elastic network interface with a private IP address that serves as an entry point for traffic destined to a supported service.\nA VPC endpoint enables you to privately connect your VPC to supported AWS services and VPC endpoint services powered by PrivateLink without requiring an internet gateway, NAT device, VPN connection or AWS Direct Connection. Instances in your VPC do not require public IP addresses to communicate with resources in the service. Traffic between your VPC and the other service does not have the Amazon network.\nEndpoints are virtual devices. They are horizontally scaled, redundant, and highly available VPC components that allow communication between instances in your VPC and services without imposing availability risks or bandwidth constrains on your network traffic.\n\nThere are two types: interface and gateway\nCurrently, gateway endpoints support S3 and DynamoDB"
  },
  {
    "objectID": "cloud.html#network-access-control-lists-acl",
    "href": "cloud.html#network-access-control-lists-acl",
    "title": "AWS Solution Architect Summary",
    "section": "Network Access Control Lists (ACL)",
    "text": "Network Access Control Lists (ACL)\nThis works like a security group for all(or any) subnets in your VPC. We can add allow/deny rules. The default VPC comes a default network ACL, and by default it allows all outbound and inbound traffic.\nWhen creating a custom network ACLs, by default denies all inbound and outbound traffic until you add rules. Each subnet in your VPC must be associated with a network ACL. If you don‚Äôt explicitly associate a subnet with a network ACL, the subnet is automatically associated with the default network ACL.\nIn order to block IP Addresses, we need to use ACLs, not security groups.\n\nA network ACL can be associated to N subnets, but 1 subnet can only be associated to 1 ACL.\nNetwork ACLs contain a numbered list of rules that is evaluated in order, starting with the lowest numbered rule.\nNetwork ACLs have separate inbound and outbound rules, and each rule can either allow or deny traffic.\nNetwork ACLs are stateless; responses to allowed inbound traffic are subject to the rules for outbound traffic and vice versa."
  },
  {
    "objectID": "cloud.html#vpc-flow-logs",
    "href": "cloud.html#vpc-flow-logs",
    "title": "AWS Solution Architect Summary",
    "section": "VPC Flow Logs",
    "text": "VPC Flow Logs\nFlow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. Flow log data is stored using Amazon CloudWatch Logs. After you‚Äôve created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs.\n\nThere are three levels of abstraction: VPC, subnet and network access level.\nYou cannot enable flow logs for VPCs that are peered with your VPC unless the peer VPC is in your account.\nYou cannot tag a flow log.\nAfter you‚Äôve created a flow log, you cannot change its configuration; for example, you can‚Äôt associate a different IAM role with the flow log.\nNot ALL IP Traffic is monitored: internal traffic done by AWS mostly."
  },
  {
    "objectID": "cloud.html#security-1",
    "href": "cloud.html#security-1",
    "title": "AWS Solution Architect Summary",
    "section": "Security",
    "text": "Security\n\nCross Site Scripting In computing, the same-origin policy is an important concept in the web application security model. Under the policy, a web browser permits scripts contained in a first web page to access data in a second web page, but only if both web pages have the same origin. This will prevent cross-site scripting (XSS) attacks.\nCORS CORS is one way the server at the other end (not the client code in the browser) can relax the same origin policy. Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g.¬†fonts) on a web page to be requested from another domain outside the domain from which the first resource was served."
  },
  {
    "objectID": "cloud.html#synchronisation",
    "href": "cloud.html#synchronisation",
    "title": "AWS Solution Architect Summary",
    "section": "Synchronisation",
    "text": "Synchronisation\nCognito tracks the association between user identity and the various different devices they sign-in from. In order to provide a seamless user experience for your application, Cognito uses Push Synchronization to push updates and synchronize user data across multiple devices. Cognito uses SNS is to send a notification to all the devices associated with a given user identity whenever data stored in the cloud changes."
  },
  {
    "objectID": "cloud.html#pricing-2",
    "href": "cloud.html#pricing-2",
    "title": "AWS Solution Architect Summary",
    "section": "Pricing",
    "text": "Pricing\nBy number of requests: first 1 million requests are free. Then $0.20 per 1 million requests thereafter. By duration which is calculated from the time your code begins executing until it returns or otherwise terminates, rounded up to the nearest 100ms. The price depends on the amount of memory you allocate to your function. You are charged $0.00001667 for every GB-second used."
  },
  {
    "objectID": "cybersecurity.html",
    "href": "cybersecurity.html",
    "title": "Cybersecurity Summary",
    "section": "",
    "text": "Cybersecurity refers to any technologies, practices and policies for preventing cyberattacks or mitigating their impact. Cybersecurity aims to protect computer systems, applications, devices, data, financial assets and people against ransomware and other malware, phishing scams, data theft and other cyberthreats.\nAt the enterprise level, cybersecurity is a key component of an organization‚Äôs overall risk management strategy. According to Cybersecurity Ventures, global spending on cybersecurity products and services will exceed USD 1.75 trillion total during the years 2021 through 2025.\nCybersecurity job growth is also robust. The US Bureau of Labor Statistics projects that ‚Äúemployment of information security analysts is projected to grow 32% from 2022 to 2032, faster than the average for all occupations.‚Äù"
  },
  {
    "objectID": "cybersecurity.html#what-is-cybersecurity",
    "href": "cybersecurity.html#what-is-cybersecurity",
    "title": "Cybersecurity Summary",
    "section": "",
    "text": "Cybersecurity refers to any technologies, practices and policies for preventing cyberattacks or mitigating their impact. Cybersecurity aims to protect computer systems, applications, devices, data, financial assets and people against ransomware and other malware, phishing scams, data theft and other cyberthreats.\nAt the enterprise level, cybersecurity is a key component of an organization‚Äôs overall risk management strategy. According to Cybersecurity Ventures, global spending on cybersecurity products and services will exceed USD 1.75 trillion total during the years 2021 through 2025.\nCybersecurity job growth is also robust. The US Bureau of Labor Statistics projects that ‚Äúemployment of information security analysts is projected to grow 32% from 2022 to 2032, faster than the average for all occupations.‚Äù"
  },
  {
    "objectID": "cybersecurity.html#why-cybersecurity-is-important",
    "href": "cybersecurity.html#why-cybersecurity-is-important",
    "title": "Cybersecurity Summary",
    "section": "Why cybersecurity is important",
    "text": "Why cybersecurity is important\nCybersecurity is important because cyberattacks and cybercrime have the power to disrupt, damage or destroy businesses, communities and lives. Successful cyberattacks lead to identity theft, personal and corporate extortion, loss of sensitive information and business-critical data, temporary business outages, lost business and lost customers and, in some cases, business closures.\nCyberattacks have an enormous and growing impact on businesses and the economy. By one estimate, cybercrime will cost the world economy USD 10.5 trillion per year by 2025.The cost of cyberattacks continues to rise as cybercriminals become more sophisticated.\nAccording to IBM‚Äôs latest Cost of a Data Breach Report:\n\nThe average cost of a data breach jumped to USD 4.88 million from USD 4.45 million in 2023‚Äîa 10% spike and the highest increase since the pandemic.\n\n\n\nBusiness losses (revenue loss due to system downtime, lost customers and reputational damage) and post-breach response costs (costs to set up call centers and credit monitoring services for affected customers or to pay regulatory fines), rose nearly 11% over the previous year.\nThe number of organizations paying more than USD 50,000 in regulatory fines as a result of a data breach rose 22.7% over the previous year; those paying more than USD 100,000 rose 19.5%."
  },
  {
    "objectID": "cybersecurity.html#cybersecurity-challenges",
    "href": "cybersecurity.html#cybersecurity-challenges",
    "title": "Cybersecurity Summary",
    "section": "Cybersecurity challenges",
    "text": "Cybersecurity challenges\nApart from the sheer volume of cyberattacks, one of the biggest challenges for cybersecurity professionals is the ever-evolving nature of the information technology (IT) landscape, and the way threats evolve with it. Many emerging technologies that offer tremendous new advantages for businesses and individuals also present new opportunities for threat actors and cybercriminals to launch increasingly sophisticated attacks. For example:\n\nThe pervasive adoption of cloud computing can increase network management complexity and raise the risk of cloud misconfigurations, improperly secured APIs and other avenues hackers can exploit.\n\n\n\nMore remote work, hybrid work and bring-your-own-device (BYOD) policies mean more connections, devices, applications and data for security teams to protect.\n\n\n\nProliferating¬†Internet of Things (IoT) and connected devices, many of which are unsecured or improperly secured by default, can be easily hijacked by bad actors.\nThe rise of artificial intelligence (AI), and of generative AI in particular, presents an entirely new threat landscape that hackers are already exploiting through prompt injection and other techniques. According to recent research from the IBM¬Æ Institute for Business Value, only 24% of generative AI initiatives are secured.\n\nAs the worldwide attack surface expands, the cybersecurity workforce is struggling to keep pace. A World Economic Forum study found that the global cybersecurity worker gap‚Äîthe gap between cybersecurity workers and jobs that need to be filled‚Äîmight reach 85 million workers by 2030.\nClosing this skills gap can have an impact. According to the Cost of a Data Breach 2024 Report, organizations suffering from a high-level shortage of security skills saw an average cost per breach of USD 5.74 million, compared to USD 3.98 million for organizations with lower-level skills shortages.\nResource-strained security teams will increasingly turn to security technologies featuring advanced analytics, artificial intelligence (AI) and automation to strengthen their cyber defenses and minimize the impact of successful attacks."
  },
  {
    "objectID": "cybersecurity.html#types-of-cybersecurity",
    "href": "cybersecurity.html#types-of-cybersecurity",
    "title": "Cybersecurity Summary",
    "section": "Types of cybersecurity",
    "text": "Types of cybersecurity\nComprehensive cybersecurity strategies protect all of an organization‚Äôs IT infrastructure layers against cyberthreats and cybercrime. Some of the most important cybersecurity domains include:\n\nAI security\nCritical infrastructure security\nNetwork security\nEndpoint security\nApplication security\nCloud security\nInformation security\nMobile security\n\n\nAI security\nAI security refers to measures and technology aimed at preventing or mitigating cyberthreats and cyberattacks that target AI applications or systems or that use AI in malicious ways.\nGenerative AI offers threat actors new attack vectors to exploit. Hackers can use malicious prompts to manipulate AI apps, poison data sources to distort AI outputs and even trick AI tools into sharing sensitive information. They can also use (and have already used) generative AI to create malicious code and phishing emails.\nAI security uses specialized risk management frameworks‚Äîand increasingly, AI-enabled cybersecurity tools‚Äîto protect the AI attack surface. According to the Cost of a Data Breach 2024 Report, organizations that deployed AI-enabled security tools and automation extensively for cyberthreat prevention saw a USD 2.2 million lower average cost per breach compared to organizations with no AI deployed.\n\n\nCritical infrastructure security\nCritical infrastructure security protects the computer systems, applications, networks, data and digital assets that a society depends on for national security, economic health and public safety.\nIn the United States, the National Institute of Standards and Technology (NIST) offers a cybersecurity framework to help IT providers and stakeholders secure critical infrastructure. The US Department of Homeland Security‚Äôs Cybersecurity and Infrastructure Security Agency (CISA) also provides guidance.\n\n\nNetwork security\nNetwork security focuses on preventing unauthorized access to networks and network resources. It also helps ensure that authorized users have secure and reliable access to the resources and assets they need to do their jobs.\n\n\nApplication security\nApplication security helps prevent unauthorized access to and use of apps and related data. It also helps identify and mitigate flaws or vulnerabilities in application design. Modern application development methods such as¬†DevOps and DevSecOps¬†build security and security testing into the development process.\n\n\nCloud security\nCloud security secures an organization‚Äôs cloud-based services and assets, including applications, data, virtual servers and other infrastructure.\nGenerally speaking, cloud security operates on the shared responsibility model. The cloud provider is responsible for securing the services that they deliver and the infrastructure that delivers them. The customer is responsible for protecting their data, code and other assets they store or run in the cloud.\n\n\nInformation security and data security\nInformation security (InfoSec) protects an organization‚Äôs important information‚Äîdigital files and data, paper documents, physical media‚Äîagainst unauthorized access, use or alteration.\nData security, the protection of digital information, is a subset of information security and the focus of most cybersecurity-related InfoSec measures.\n\n\nMobile security\nMobile security encompasses cybersecurity tools and practices specific to smartphones and other mobile devices, including mobile application management (MAM) and enterprise mobility management (EMM).\nMore recently, organizations are adopting unified endpoint management (UEM) solutions that allow them to protect, configure and manage all endpoint devices, including mobile devices, from a single console."
  },
  {
    "objectID": "cybersecurity.html#common-cybersecurity-threats",
    "href": "cybersecurity.html#common-cybersecurity-threats",
    "title": "Cybersecurity Summary",
    "section": "Common cybersecurity threats",
    "text": "Common cybersecurity threats\nSome of the most common types of cyberthreats include\n\nMalware\nRansomware\nPhishing\nCredential theft and abuse\nInsider threats\nAI attacks\nCryptojacking\nDistributed denial of service (DDoS)\n\n\n\nMalware\nMalware, short for ‚Äúmalicious software‚Äù, is any software code or computer program that is intentionally written to harm a computer system or its users. Almost every modern¬†cyberattack¬†involves some type of malware.\nHackers and cybercriminals create and use malware to gain unauthorized access to computer systems and sensitive data, hijack computer systems and operate them remotely, disrupt or damage computer systems, or hold data or systems hostage for large sums of money (see ‚ÄúRansomware‚Äù).\n\n\nRansomware\nRansomware is a type of malware that encrypts a victim‚Äôs data or device and threatens to keep it encrypted‚Äîor worse‚Äîunless the victim pays a ransom to the attacker.\nThe earliest ransomware attacks demanded a ransom in exchange for the encryption key required to unlock the victim‚Äôs data. Starting around 2019, almost all ransomware attacks were double extortion attacks that also threatened to publicly share victims‚Äô data; some triple extortion attacks added the threat of a distributed denial-of-service (DDoS) attack.\nMore recently, ransomware attacks are on the decline. According to the IBM X-Force Threat Intelligence Index 2024, ransomware attacks accounted for 20% of all attacks in 2023, down 11.5% from 2022. The decline is likely the result of improved ransomware prevention, more effective law enforcement intervention and data backup and protection practices that enable businesses to recover without paying the ransom.\nIn the meantime, ransomware attackers have repurposed their resources to start other types of cyberthreats, including infostealer malware that allows attackers to steal data and hold it hostage without locking down the victim‚Äôs systems and data destruction attacks that destroy or threaten to destroy data for specific purposes.\n\n\nPhishing\nPhishing attacks are email, text or voice messages that trick users into downloading malware, sharing sensitive information or sending funds to the wrong people.\nMost users are familiar with bulk phishing scams‚Äîmass-mailed fraudulent messages that appear to be from a large and trusted brand, asking recipients to reset their passwords or reenter credit card information. More sophisticated phishing scams, such as spear phishing and business email compromise (BEC), target specific individuals or groups to steal especially valuable data or large sums of money.\nPhishing is just one type of social engineering, a class of ‚Äúhuman hacking‚Äù tactics and interactive attacks that use psychological manipulation to pressure people into taking unwise actions.\n\n\nCredential theft and account abuse\nThe X-Force Threat Intelligence Index found that identity-based attacks, which hijack legitimate user accounts and abuse their privileges, account for 30% of attacks. This makes identity-based attacks the most common entry point into corporate networks.\nHackers have many techniques for stealing credentials and taking over accounts. For example, Kerberoasting attacks manipulate the Kerberos authentication protocol commonly used in Microsoft Active Directory to seize privileged service accounts. In 2023, the IBM X-Force team experienced a 100% increase in Kerberoasting incidents.\nSimilarly, the X-Force team saw a 266% increase in the use of infostealer malware that secretly records user credentials and other sensitive data.\n\n\nInsider threats\nInsider threats are threats that originate with authorized users‚Äîemployees, contractors, business partners‚Äîwho intentionally or accidentally misuse their legitimate access or have their accounts hijacked by cybercriminals.\nInsider threats can be harder to detect than external threats because they have the earmarks of authorized activity and are invisible to antivirus software, firewalls and other security solutions that block external attacks.\n\n\nAI attacks\nMuch like cybersecurity professionals are using AI to strengthen their defenses, cybercriminals are using AI to conduct advanced attacks.\nIn generative AI fraud, scammers use generative AI to produce fake emails, applications and other business documents to fool people into sharing sensitive data or sending money.\nThe X-Force Threat Intelligence Index reports that scammers can use open source generative AI tools to craft convincing phishing emails in as little as five minutes. For comparison, it takes scammers 16 hours to come up with the same message manually.\nHackers are also using organizations‚Äô AI tools as attack vectors. For example, in prompt injection attacks, threat actors use malicious inputs to manipulate generative AI systems into leaking sensitive data, spreading misinformation or worse.\n\n\nCryptojacking\nCryptojacking happens when hackers gain access to an endpoint device and secretly use its computing resources to mine cryptocurrencies such as bitcoin, ether or monero.\nSecurity analysts identified cryptojacking as a cyberthreat around 2011, shortly after the introduction of cryptocurrency. According to the IBM X-Force Threat Intelligence Index, cryptojacking is now among the top three areas of operations for cybercriminals.\n\n\nDistributed denial of service (DDoS)\nA DDoS attack attempts to crash a server, website or network by overloading it with traffic, usually from a botnet‚Äîa network of distributed systems that a cybercriminal hijacks by using malware and remote-controlled operations.\nThe global volume of DDoS attacks spiked during the COVID-19 pandemic. Increasingly, attackers are combining DDoS attacks with ransomware attacks, or simply threatening to launch DDoS attacks unless the target pays a ransom."
  },
  {
    "objectID": "cybersecurity.html#cybersecurity-myths",
    "href": "cybersecurity.html#cybersecurity-myths",
    "title": "Cybersecurity Summary",
    "section": "Cybersecurity myths",
    "text": "Cybersecurity myths\nDespite an ever-increasing volume of cybersecurity incidents worldwide and the insights gleaned from resolving these incidents, some misconceptions persist. Some of the most dangerous include:\n\nStrong passwords are adequate protection\nStrong passwords do make a difference; for example, a 12-character password takes 62 trillion times longer to crack than a 6-character password. But passwords are relatively easy to acquire in other ways, such as through social engineering, keylogging malware, buying them on the dark web or paying disgruntled insiders to steal them.\n\n\nMost cybersecurity risks are well-known\nIn fact, the cyberthreat landscape is constantly changing. Thousands of new vulnerabilities are reported in old and new applications and devices every year. Opportunities for human error‚Äîspecifically by negligent employees or contractors who unintentionally cause a data breach‚Äîkeep increasing.\n\n\nAll cyberattack vectors are contained\nCybercriminals find new attack vectors all the time. The rise of AI technologies, operational technology (OT), Internet of Things (IoT) devices and cloud environments all give hackers new opportunities to cause trouble.\n\n\nMy industry is safe\nEvery industry has its share of cybersecurity risks. For example, ransomware attacks are targeting more sectors than ever, including local governments, nonprofits and healthcare providers. Attacks on supply chains, ‚Äú.gov‚Äù websites and critical infrastructure have also increased.\n\n\nCybercriminals don‚Äôt attack small businesses\nYes, they do. The Hiscox Cyber Readiness Report¬†found that almost half (41%) of small businesses in the US experienced a cyberattack in the last year."
  },
  {
    "objectID": "cybersecurity.html#key-cybersecurity-best-practices-and-technologies",
    "href": "cybersecurity.html#key-cybersecurity-best-practices-and-technologies",
    "title": "Cybersecurity Summary",
    "section": "Key cybersecurity best practices and technologies",
    "text": "Key cybersecurity best practices and technologies\nWhile each organization‚Äôs cybersecurity strategy differs, many use these tools and tactics to reduce vulnerabilities, prevent attacks and intercept attacks in progress:\n\nSecurity awareness training\nData security tools\nIdentity and access management\nThreat detection and response\nDisaster recovery\n\n\nSecurity awareness training\nSecurity awareness training helps users understand how seemingly harmless actions‚Äîfrom using the same simple password for multiple log-ins to oversharing on social media‚Äîincrease their own or their organization‚Äôs risk of attack.\nCombined with thought-out¬†data security¬†policies, security awareness training can help employees protect sensitive personal and organizational data. It can also help them recognize and avoid phishing and malware attacks.\n\n\nData security tools\nData security tools, such as¬†encryption¬†and¬†data loss prevention¬†(DLP) solutions, can help stop security threats in progress or mitigate their effects. For example, DLP tools can detect and block attempted data theft, while encryption can make it so that any data that hackers steal is useless to them.\n\n\nIdentity and access management\nIdentity and access management (IAM)¬†refers to the tools and strategies that control how users access resources and what they can do with those resources.\nIAM technologies can help protect against account theft. For example,¬†multifactor authentication¬†requires users to supply multiple credentials to log in, meaning threat actors need more than just a password to break into an account.\nLikewise, adaptive authentication systems detect when users are engaging in risky behavior and raise additional authentication challenges before allowing them to proceed. Adaptive authentication can help limit the¬†lateral movement¬†of hackers who make it into the system.\nA¬†zero trust¬†architecture is one way to enforce strict access controls by verifying all connection requests between users and devices, applications and data.\n\n\nAttack surface management\nAttack surface management (ASM)¬†is the continuous discovery, analysis, remediation and monitoring of the cybersecurity vulnerabilities and potential attack vectors that make up an organization‚Äôs¬†attack surface.\nUnlike other cyberdefense disciplines, ASM is conducted entirely from a hacker‚Äôs perspective rather than the perspective of the defender. It identifies targets and assesses risks based on the opportunities they present to a malicious attacker.\n\n\nThreat detection and response\nAnalytics- and AI-driven technologies can help identify and respond to attacks in progress. These technologies can include¬†security information and event management (SIEM),¬†security orchestration, automation and response (SOAR)¬†and¬†endpoint detection and response (EDR). Typically, organizations use these technologies as part of a formal¬†incident response¬†plan.\n\n\nDisaster recovery\nDisaster recovery¬†capabilities can play a key role in maintaining business continuity and remediating threats in the event of a cyberattack. For example, the ability to fail over to a backup that is hosted in a remote location can help a business resume operations after a ransomware attack (sometimes without paying a ransom)"
  },
  {
    "objectID": "coding.html",
    "href": "coding.html",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Algorithm is a step-by-step procedure for solving a problem or accomplishing a task. In the context of data structures and algorithms, it is a set of well-defined instructions for performing a specific computational task. Algorithms are fundamental to computer science and play a very important role in designing efficient solutions for various problems. Understanding algorithms is essential for anyone interested in mastering data structures and algorithms.\n\n\nAn algorithm is a finite sequence of well-defined instructions that can be used to solve a computational problem. It provides a step-by-step procedure that convert an input into a desired output.\nAlgorithms typically follow a logical structure:\n\nInput: The algorithm receives input data.\nProcessing: The algorithm performs a series of operations on the input data.\nOutput: The algorithm produces the desired output.\n\n\n\n\nAlgorithms are essential for solving complex computational problems efficiently and effectively. They provide a systematic approach to:\n\nSolving problems: Algorithms break down problems into smaller, manageable steps.\nOptimizing solutions: Algorithms find the best or near-optimal solutions to problems.\nAutomating tasks: Algorithms can automate repetitive or complex tasks, saving time and effort.\n\n\n\n\nAnalysis of Algorithms is the process of evaluating the efficiency of algorithms, focusing mainly on the time and space complexity. This helps in evaluating how the algorithm‚Äôs running time or space requirements grow as the size of input increases.\n\n\n\nWhy is Analysis Important?\nOrder of Growth\nAsymptotic Analysis\nWorst, Average and Best Cases of Algorithms\n\n\n\n\n\nBig-O Notation\nTheta - Œò Notation\nBig ‚Äì ‚Ñ¶ (Big- Omega) Notation\nTime Complexity\nSpace Complexity\nDifference between Big Oh, Big Omega and Big Theta\nExamples of Big-O analysis\nDifference between big O notations and tilde\nPractice Questions on Time Complexity Analysis\n\n\n\n\n\nAnalyzing Loops\nAnalyzing Recursive Functions\nAmortized Analysis\n\n\n\n\n\nMathematical algorithms are used for analyzing and optimizing data structures and algorithms. Knowing basic concepts like¬†divisibility,¬†LCM,¬†GCD, etc. can really help you understand how data structures work and improve your ability to design efficient algorithms.\n\n\n\nNumbers\nPrime Numbers\nArithmetic Progression\nGeometric Progression\nGCD and LCM\nFactorial\nPermutation and Combination\nCatalan Number\nModular Arithmetic\n\n\n\n\n\nSum of Naturals\nSum of Squares of Naturals\nNth Term of AP\nNth Term of GP\nNth Triangular Number\nSum of Sums of Natural Numbers\nCount Digits\nSum of Digits\nReverse Digits\nK-th Digit in a^b\nPalindrome Number\nGCD of Two Numbers\nLCM of Two Numbers\nAdd two fractions\nCheck for Co-Prime\nFactorial of a Number\nGCD of more than 2\nLCM of more than 2\nPadovan Sequence\n\n\n\n\n\nPair Cube Count\nSum of 2, 22, 222, ‚Ä¶‚Ä¶‚Ä¶\nSum of 1^2 + 3^2 + 5^2 + . . . + (2*n ‚Äì 1)^2\nSum of 0.6, 0.06, 0.006, 0.0006, ‚Ä¶to n terms\nn-th term of 2, 12, 36, 80, 150‚Ä¶.\nDigit Root\nFibonacci Numbers\nLucas Number\nCheck for Power\nThree Divisors\nSquare Root\nBinomial Coefficient\nPascal Triangle\nnth Row of the Pascal Triangle\nArmstrong Numbers\nDeterminant of a Matrix\nModular Exponentiation\nCheck for Perfect Squares\nDivisibility by 3\nDivisibility by 4\nDivisibility by 7\nDivisibility by 11\nDivisibility by 13\nDivisibility by 29\n\n\n\n\n\nLinear Diophantine Equations\nEuler‚Äôs Totient Function\nSieve of Eratosthenes\nAll Divisors\nPrime Factorization\nLargest Prime Factor\nFactorial of a Large Number\nLargest Power Divisible in Factorial\nLast Non-zero Digit of Factorial\nPower Set\nAdd Two Polynomials\nAll Permutations of a String\nNext Permutation\nCheck for Carmichael Numbers\nCollatz sequence\nGrid Unique Paths\nNth Even Fibonacci Number\nLast 2 Digits of Nth Fibonacci\n\n\n\n\n\nJosephus Problem\nWater Jug Tutorial\nSegmented Sieve\nk-th prime factor\nN-th Root\nSum of Digits in Factorial\nEgg Dropping\nNext String\n\n\n\n\n\nBitwise algorithms are algorithms that operate on individual bits of numbers. These algorithms manipulate the binary representation of numbers like¬†shifting bits,¬†setting or¬†clearing specific bits of a number and perform¬†bitwise operations¬†(AND, OR, XOR). Bitwise algorithms are commonly used in¬†low-level programming, cryptography, and optimization tasks¬†where efficient manipulation of individual bits is required.\n\n\n\nIntroduction to Bitwise Algorithms\nBitwise Operators in C/C++\nBitwise Operators in Java\nPython Bitwise Operators\nJavaScript Bitwise Operators\nAll about Bit Manipulation\nLittle and Big Endian Mystery\n\n\n\n\n\nBits manipulation (Important tactics)\nBitwise Hacks for Competitive Programming\n\n\n\n\n\nBinary Representation\nTurn off the rightmost set bit\nCheck if K-th Bit Set\nSet the K-th Bit\nModulus division by 2‚Äôs Power\nOdd Occurring Number\nPower of two\nThe only set bit\nAdd Bit Strings\nCheck for Integer Overflow\nXOR without using XOR\nCheck for Equal\nCheck for opposite signs\nSwap Two Numbers\nRussian Peasant\n\n\n\n\n\nMost Significant Set Bit\nRightmost Set Bit\nCount Set Bits\nSwap Bits\nRotate Bits\nSmallest of Three\nMinimum without branching\nSmallest power of 2 greater than or equal to n\nProgram to find parity\nCheck if binary is palindrome\nGenerate n-bit Gray Codes\nCheck for Sparse\nEuclid when % and / are costly\nSquare without using *, / and pow()\nCyclic Redundancy Check and Modulo-2 Division\nSet Bits in a Range\nCheck for Bleak\nGray to Binary and Vice Versa\n\n\n\n\n\nNext higher with same set bits\nKaratsuba Algorithm for fast Multiplication\nMax Subarray XOR\nLongest Sequence of 1‚Äôs in Binary with One Flip\nClosest Smaller and greater with same set bits\nBitmasking and Dynamic Programming\nCompute the Parity\nXOR Encryption by Shifting Plaintext\nCount pairs with at least one digit common\nFloating to Binary\nBooth‚Äôs Multiplication Algorithm\nPairs with Pandigital Concatenation\nn-th number whose binary is a palindrome\nTwo non-repeating in an array of repeating\n\n\n\n\nBitwise algorithms are algorithms that operate on individual bits of data rather than on larger data types like integers or floating-point numbers. These algorithms manipulate bits directly, typically using bitwise operators such as AND, OR, XOR, shift left, shift right, and complement.\n\n\n\nHere are some common bitwise algorithms and operations:\n\nBitwise AND (&): Takes two numbers as input and performs a bitwise AND operation on their corresponding bits. It returns 1 only if both bits are 1; otherwise, it returns 0.\nBitwise OR (|): Performs a bitwise OR operation on the corresponding bits of two numbers. It returns 1 if at least one of the bits is 1.\nBitwise XOR (^): Performs a bitwise exclusive OR operation on the corresponding bits of two numbers. It returns 1 if the bits are different and 0 if they are the same.\nBitwise NOT (~): Performs a bitwise NOT operation, which flips each bit of the input (1 becomes 0 and 0 becomes 1).\nLeft Shift (&lt;&lt;) and Right Shift (&gt;&gt;): These operators shift the bits of a number to the left or right by a specified number of positions. Left shifting is equivalent to multiplying the number by 2, while right shifting is equivalent to dividing by 2.\n\n\n\n\n\nBit manipulation (setting, clearing, toggling bits): Bitwise operators are often used to manipulate individual bits of numbers. This includes tasks such as setting bits (using OR), clearing bits (using AND with the complement), toggling bits (using XOR with 1), and checking the value of a specific bit.\nEfficient storage of data: Bitwise algorithms play a crucial role in data compression techniques like Huffman coding. They can efficiently represent and process compressed data by manipulating bits directly.\nCryptography: Many cryptographic algorithms, such as AES (Advanced Encryption Standard), DES (Data Encryption Standard), and SHA (Secure Hash Algorithm), utilize bitwise operations for encryption, decryption, and hashing. Bitwise XOR, in particular, is commonly used in encryption algorithms for its simplicity and effectiveness.\nNetworking and Protocol Handling: Bitwise algorithms are used in networking protocols for tasks like IP address manipulation, subnet masking, and packet parsing. For example, bitwise AND is used in subnet masking to determine the network address from an IP address and subnet mask.\nLow-Level System Programming: Bitwise operations are essential in low-level system programming for tasks such as device control, memory management, and bit-level I/O operations. They are used to manipulate hardware registers, set/clear flags, and optimize code for performance.\nError Detection and Correction: Bitwise algorithms are employed in error detection and correction techniques, such as CRC (Cyclic Redundancy Check) and Hamming codes. These algorithms use bitwise XOR and other operations to detect and correct errors in transmitted data.\n\n\n\n\n\nSearching Algorithms are used to find a specific element or item in a collection of data. These algorithms are widely used to retrieve data efficiently from large datasets.\n\n\n\nLinear Search\nBinary Search\nTwo Pointers Technique\n\n\n\n\n\nbinary_search, lower_bound and upper_bound in C++\nArrays.binarySearch() in Java\nArrays.binarySearch() in Java for Search in subarray\nCollections.binarySearch() in Java\nBisect in Python\nList.BinarySearch in C#\n\n\n\n\n\nLargest in an Array\nSecond Largest in an array\nLargest three in an array\nMissing Number\nFirst Repeating\nMissing and Repeating\nCount 1‚Äôs in a sorted binary array\nClosest to 0 Sum Pair\nPair with the given difference\nk largest(or smallest) Elements\nKth smallest in row and column-wise sorted\nCommon elements in 3 sorted\nCeiling in a sorted\nFloor in a Sorted\nMaximum in a Bitonic\nElements that appear more than n/k times\n\n\n\n\n\nTriplets with zero sum\nPartition Point\nLargest pair sum\nK‚Äôth Smallest in Unsorted Array\nSearch an in a sorted and rotated\nMin in a sorted and rotated\nMax in a sorted and rotated\nPeak element\nMax and min using minimum comparisons\nFind a Fixed Point in a given array\nK most frequent words from a file\nK closest elements\n2 Sum ‚Äì Pair Sum Closest to Target in Sorted Array\nClosest pair from two sorted arrays\nThree closest from three sorted arrays\nBinary Search for Rationals\nMissing Element in AP\n\n\n\n\n\nMedian of two sorted arrays\nMedian of two sorted of different sizes\nSearch in an almost sorted array\nSearch in a sorted infinite array\nPair sum in a sorted and rotated array\nK‚Äôth Smallest/Largest Element in Unsorted Array\nK‚Äôth largest element in a stream\nBest First Search (Informed Search)\n\n\n\n\n\nSentinel Linear Search\nMeta Binary Search | One-Sided Binary Search\nTernary Search\nJump Search\nInterpolation Search\nExponential Search\nFibonacci Search\nThe Ubiquitous Binary Search\n\n\n\n\n\nLinear Search vs Binary Search\nInterpolation search vs Binary search\nWhy is Binary Search preferred over Ternary Search?\nIs Sentinel Linear Search better than normal Linear Search?\n\n\n\n\n\nSorting algorithms¬†are used to¬†arrange the elements of a list in a¬†specific order, such as numerical or alphabetical. It organizes the items in a systematic way, making it easier to search for and access specific elements.\n\n\n\nIntroduction to Sorting\nApplications of Sorting\n\n\n\n\nComparison Based : Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Quick Sort, Heap Sort, Cycle Sort, 3-way Merge Sort\nNon Comparison Based : Counting Sort, Radix Sort, Bucket Sort, TimSort, Comb Sort, Pigeonhole Sort\nHybrid Sorting Algorithms : IntroSort, Tim Sort\n\n\n\n\nqsort() in C\nsort() in C++ STL\nArrays.sort() in Java with examples\nCollections.sort() in Java with Examples\nSort a List in Python\nSorting in JavaScript\n\n\n\n\n\nCheck if an array is Sorted\nSort an array of two types\nSort a String\nSort Each Row of a Matrix\nSort a Matrix\nSort a Linked List\nSort in Wave Form\nSort by Frequency\nSort from Different Machines\nCheck if any two intervals overlap\nMissing elements of a range\nSort by set bits counts\nSort even and odd placed in different orders\nSorting Big Integers\nSort strings by lengths\nMerge Two Sorted Arrays\nSort when two halves are sorted\n2 Sum - Pair in a Sorted Array\nIntersection of two sorted arrays\nUnion of two sorted arrays\nMeeting Rooms\n\n\n\n\n\nMinimum Increments to Make Unique\nMerge Overlapping Intervals\nMinimum Platforms\nClosest Pair of Elements\nClosest Pair of Points\nChocolate Distribution Problem\nMin and Max Amount to Buy All\nThree Way Partitioning\nSort an array of 0s, 1s and 2s\nSort a linked list of 0s, 1s and 2s\nInversion count\nK-th Smallest Element\nK Smallest Elements\n3 Sum - Find Any\n3 Sum - Closest Triplet\nSmallest Difference Triplet from Three arrays\nMerge K Sorted Arrays\nMerge K Sorted Linked Lists\nMin Unsorted Subarray to make array sorted\nSort a nearly sorted array\nSort n numbers in range from 0 to n^2 ‚Äì 1\nSort an array of 1 to n\nSort according to order defined by another\nMaximum intervals overlap\nPermutation with worst Case of Merge Sort\nMinimum swaps to make two arrays identical\nPermute two arrays such that all pair suns are greater than K\nBucket Sort To Sort an Array with Negative Numbers\nConvert an Array to reduced form using Vector of pairs\nCheck if array can be sorted with conditional swapping of adjacent\n4 Sum - Find Any [More problems an 4 Sum are in Hard Section]\n\n\n\n\n\nMerge Without Extra Space\nTop K Frequent Elements\n3 Sum - Distinct Triplets\n4 Sum - Distinct Quadruples\n4 Sum - All Quadruples\n4 Sum - Closest Quadruple\nSurpasser Counts in an Array\nCount distinct occurrences as a subsequence\nMinimum consecutive number subsets\nMinimum swaps for Binary Tree to BST\nK-th smallest element after removing some integers from natural numbers\nMax frequency diff such greater freq item is also is also greater\nMin swaps to reach permuted array with at most 2 positions left swaps allowed\nMaking Array Elements Same\nSort an array after applying an equation\nArray of strings in sorted order without copying strings\n\n\n\n\n\nRecursion¬†is a programming technique where a function¬†calls itself¬†within its own definition. It is usually used to solve problems that can be broken down into smaller instances of the same problem.\n\n\n\nIntroduction to Recursion\nRecursion vs Iteration\nFinite and Infinite Recursion\nWhat is Tail Recursion\nTail Recursion Optimization\n\n\n\n\n\nRecursion in Python\nRecursion in Java\nRecursion in C#\nRecursion in JavaScript\n\n\n\n\n\nPrint 1 to n without loop\nPrint n to 1 without loop\nMean of Array using Recursion\nSum of natural numbers using recursion\nDecimal to binary number using recursion\nSum of array elements using recursion\nPrint reverse of a string using recursion\nProgram for length of a string using recursion\nSum of digit of a number using recursion\nTail recursion to calculate sum of array elements.\nProgram to print first n Fibonacci Numbers | Set 1\nFactorial of a number\nArray Min and Max using Recursion\nPalindrome Check using Recursion\nCount Set-bits using Recursion\nFibonacci Series in reverse order using Recursion\n\n\n\n\n\nRecursively remove all adjacent duplicates\nSort the Queue using Recursion\nReversing a queue using recursion\nCoin Change\nBinary to Gray code using recursion\nDelete a linked list using recursion\nProduct of 2 Numbers using Recursion\nPrograms for Printing Pyramid Patterns using Recursion\nLength of longest palindromic sub-string : Recursion\nProgram for Tower of Hanoi Algorithm\nTime Complexity Analysis | Tower Of Hanoi (Recursion)\nProgram to calculate value of nCr using Recursion\nFind geometric sum of the series using recursion\nConvert a String to an Integer using Recursion\nDFS traversal of a Tree\nBottom View of a Binary Tree using Recursion\nWrite a program to print all Permutations of given String\nPrint all subsets of a given Set or Array\nPrint all possible paths from top left to bottom right of a mXn matrix\nPrint all combinations of balanced parentheses\nLongest Common Subsequence (LCS)\n\n\n\n\n\nFind the value of a number raised to its reverse\nHow to Sort a Stack using Recursion\nReverse a Doubly linked list using recursion\nGiven a string, print all possible palindromic partitions\nCheck if a string is a scrambled form of another string\nWord Break Problem | DP-32\nPrint all palindromic partitions of a string\nN Queen Problem | Backtracking-3\nAlgorithm to Solve Sudoku | Sudoku Solver\nThe Knight‚Äôs tour problem\n\n\n\n\nA recursive algorithm is an algorithm that uses recursion to solve a problem. Recursive algorithms typically have two parts:\n\nBase case: Which is a condition that stops the recursion.\nRecursive case: Which is a call to the function itself with a smaller version of the problem.\n\n\n\n\nThere are several different recursion types and terms. These include:\n\nDirect recursion: This is typified by the factorial implementation where the methods call itself.\nIn-Direct recursion: This happens where one method, say method A, calls another method B, which then calls method A. This involves two or more methods that eventually create a circular call sequence.\nHead recursion: The recursive call is made at the beginning of the method.\nTail recursion: The recursive call is the last statement.\n\n\n\n\nHere are some common applications of recursion:\n\nTree and Graph Traversal: Depth-first search (DFS) and breadth-first search (BFS)\nDynamic Programming: Solving optimization problems by breaking them into smaller subproblems\nDivide-and-Conquer: Solving problems by dividing them into smaller parts, solving each part recursively, and combining the results\nBacktracking: Exploring all possible solutions to a problem by recursively trying different options\nCombinatorics: Counting or generating all possible combinations or permutations of a set\n\n\n\n\nRecursion is a powerful technique that can be used to solve a wide variety of problems. However, it is important to use recursion carefully, as it can lead to stack overflows if not used properly.\nRecursion should be used when:\n\nThe problem can be broken down into smaller subproblems that can be solved recursively.\nThe base case is easy to identify.\nThe recursive calls are tail recursive.\n\n\n\n\n\nBacktracking Algorithm is derived from the¬†Recursion algorithm, with the option to¬†revert if a recursive solution fails, i.e.¬†in case a solution fails, the program¬†traces back¬†to the moment where it failed and builds on another solution. So basically it tries out all the possible solutions and finds the correct one.\n\n\n\nIntroduction to Backtracking\nBacktracking vs Recursion\nBacktracking vs Branch and Bound\n\n\n\n\n\nPermutations of a String\nThe Knight‚Äôs tour problem\nRat in a Maze\nN Queen Problem | Backtracking-3\nSubset Sum problem\nm Coloring Problem\nHamiltonian Cycle\nSudoku | Backtracking-7\nMagnet Puzzle\nRemove Invalid Parentheses\nA backtracking approach to generate n bit Gray Codes\n\n\n\n\n\nBacktracking to find all subsets\nCheck if a given string is sum-string\nCount all possible paths between two vertices\nFind all distinct subsets of a given set\nFind if there is a path of more than k length from a source\nPrint all paths from a given source to a destination\nPrint all possible strings that can be made by placing spaces\n\n\n\n\n\nTug of War\n8 queen problem\nCombinational Sum\nWarnsdorff‚Äôs algorithm for Knight‚Äôs tour problem\nFind paths from corner cell to middle cell in maze\nFind Maximum number possible by doing at-most K swaps\nRat in a Maze with multiple steps or jump allowed\nN Queen in O(n) space\n\n\n\n\n\nPower Set in Lexicographic order\nWord Break Problem using Backtracking\nPartition of a set into K subsets with equal sum\nLongest Possible Route in a Matrix with Hurdles\nFind shortest safe route in a path with landmines\nPrint all palindromic partitions of a string\nPrinting all solutions in N-Queen Problem\nPrint all longest common sub-sequences in lexicographical order\n\n\n\n\nBacktracking is a problem-solving algorithmic technique that involves finding a solution incrementally by trying¬†different options¬†and¬†undoing¬†them if they lead to a¬†dead end.\nIt is commonly used in situations where you need to explore multiple possibilities to solve a problem, like searching for a path in a maze or solving puzzles like Sudoku. When a dead end is reached, the algorithm backtracks to the previous decision point and explores a different path until a solution is found or all possibilities have been exhausted.\n\n\n\nA backtracking algorithm works by recursively exploring all possible solutions to a problem. It starts by choosing an initial solution, and then it explores all possible extensions of that solution. If an extension leads to a solution, the algorithm returns that solution. If an extension does not lead to a solution, the algorithm backtracks to the previous solution and tries a different extension.\nThe following is a general outline of how a backtracking algorithm works:\n\nChoose an initial solution.\nExplore all possible extensions of the current solution.\nIf an extension leads to a solution, return that solution.\nIf an extension does not lead to a solution, backtrack to the previous solution and try a different extension.\nRepeat steps 2-4 until all possible solutions have been explored.\n\n\n\n\nExample: Finding the shortest path through a maze\nInput: A maze represented as a 2D array, where 0 represents an open space and 1 represents a wall.\nAlgorithm:\n\nStart at the starting point.\nFor each of the four possible directions (up, down, left, right), try moving in that direction.\nIf moving in that direction leads to the ending point, return the path taken.\nIf moving in that direction does not lead to the ending point, backtrack to the previous position and try a different direction.\nRepeat steps 2-4 until the ending point is reached or all possible paths have been explored.\n\n\n\n\nBacktracking algorithms are best used to solve problems that have the following characteristics:\n\nThere are multiple possible solutions to the problem.\nThe problem can be broken down into smaller subproblems.\nThe subproblems can be solved independently.\n\n\n\n\nBacktracking algorithms are used in a wide variety of applications, including:\n\nSolving puzzles (e.g., Sudoku, crossword puzzles)\nFinding the shortest path through a maze\nScheduling problems\nResource allocation problems\nNetwork optimization problems\nCombinatorial problems, such as generating permutations, combinations, or subsets.\n\n\n\n\n\nDivide and conquer algorithms follow a recursive strategy to solve problems by dividing them into¬†smaller subproblems, solving those subproblems, and combining the solutions to obtain the final solution.\n\n\n\nIntroduction to Divide and Conquer\nDynamic Programming vs Divide-and-Conquer\nDecrease and Conquer\nAdvanced master theorem for divide and conquer recurrences\n\n\n\n\n\nBinary Search\nMerge Sort\nQuick Sort\nCalculate pow(x, n)\nKaratsuba algorithm for fast multiplication\nStrassen‚Äôs Matrix Multiplication\nConvex Hull (Simple Divide and Conquer Algorithm)\nQuickhull Algorithm for Convex Hull\n\n\n\n\n\nSquare root of an integer\nMaximum and minimum of an array using minimum number of comparisons\nFind frequency of each element in a limited range array in less than O(n) time\nTiling Problem\nCount Inversions\nThe Skyline Problem\nSearch in a Row-wise and Column-wise Sorted 2D Array\nAllocate minimum number of pages\nModular Exponentiation (Power in Modular Arithmetic)\n\n\n\n\n\nBinary Search Based Problems\nMerge Sort Based Problems\nQuick Sort Based Problems\n\n\n\n\n\nGreedy Algorithm builds up the solution one piece at a time and chooses the next piece which gives the most obvious and immediate benefit i.e., which is the most¬†optimal choice at that moment. So the problems where choosing¬†locally optimal¬†also leads to the global solutions are best fit for Greedy.\n\n\n\nIntroduction to Greedy Algorithm\nGreedy Algorithms General Structure\n\n\n\n\n\nFractional Knapsack\nMin Cost to Make Array Size 1\nMin Rotations for Circular Lock\nMax Composite Numbers to Make n\nSmallest Subset Greater Sum\nAssign Cookies\nBuy Maximum Stocks\nMax Consecutive Diff Sum\nMin and Max Costs to buy all\nMin Notes with Given Sum\nMax Equal Sum of Three Stacks\n\n\n\n\n\nActivity Selection Problem\nJump Game\nJob Sequencing Problem\nEgyptian Fraction\nMerge Overlapping Intervals\nMin Fibonacci Terms with Sum K\nMinimum Platforms\nMin Cost to Connect n ropes\nMax trains\nPartition 1 to n into two min diff groups\nPaper cut into min squares\nMin diff groups of size two\nMax Satisfied Customers\nMin initial vertices to traverse matrix with constraints\nLargest palindromic number by permuting digits\nSmallest with n digits and digits sum\nLexicographically largest subsequence with every char at least k times\n\n\n\n\n\nMinimize the Max Height Diff\nMaking max equal with k updates\nMinimize cash flow among friends\nMinimum Cost to cut a board into squares\nMinimum cost to process m tasks where switching costs\nMinimum time to finish all jobs with given constraints\nMinimize the maximum difference between the heights of towers\nMinimum edges to reverse to make path from a source to a destination\nFind the Largest Cube formed by Deleting minimum Digits from a number\nRearrange characters in a string such that no two adjacent are same\nRearrange a string so that all same characters become d distance away\n\n\n\n\n\nActivity Selection Problem\nJob Sequencing Problem\nHuffman Coding\nHuffman Decoding\nWater Connection Problem\nMinimum Swaps for Bracket Balancing\nEgyptian Fraction\nPolicemen catch thieves\nFitting Shelves Problem\nAssign Mice to Holes\n\n\n\n\n\nMinimum product subset of an array\nMaximize array sum after K negations using Sorting\nMinimum sum of product of two arrays\nMinimum sum of absolute difference of pairs of two arrays\nMinimum increment/decrement to make array non-Increasing\nSorting array with reverse around middle\nSum of Areas of Rectangles possible for an array\nLargest lexicographic array with at-most K consecutive swaps\nPartition into two subarrays of lengths k and (N ‚Äì k) such that the difference of sums is maximum\n\n\n\n\n\nFirst Fit algorithm in Memory Management\nBest Fit algorithm in Memory Management\nWorst Fit algorithm in Memory Management\nShortest Job First Scheduling\nJob Scheduling with two jobs allowed at a time\nProgram for Optimal Page Replacement Algorithm\n\n\n\n\n\nKruskal‚Äôs Minimum Spanning Tree\nPrim‚Äôs Minimum Spanning Tree\nBoruvka‚Äôs Minimum Spanning Tree\nDijkastra‚Äôs Shortest Path Algorithm\nDial‚Äôs Algorithm\nMinimum cost to connect all cities\nMax Flow Problem Introduction\nNumber of single cycle components in an undirected graph\n\n\n\n\n\nSet cover problem\nBin Packing Problem\nGraph Coloring\nK-centers problem\nShortest superstring problem\nApproximate solution for Travelling Salesman Problem using MST\n\n\n\n\n\nFractional Knapsack Problem\nMinimum number of coins required\n\n\n\n\n\nDynamic Programming¬†is a method used to solve complex problems by breaking them down into simpler¬†subproblems. By solving each subproblem only¬†once and¬†storing the results, it avoids redundant computations, leading to more¬†efficient solutions for a wide range of problems.\n\n\n\nIntroduction to DP\nTabulation vs Memoizatation\nSteps to solve a DP Problem\n\n\n\n\n\nFibonacci numbers\nTribonacci Numbers\nLucas Numbers\nClimbing Stairs\nClimbing Stairs with 3 Moves\nWeighted Climbing Stairs\nMaximum Segments\nnth Catalan Number\nCount Unique BSTs\nCount Valid Parenthesis\nWays to Triangulate a Polygon\nMin Sum in a Triangle\nMinimum Perfect Squares\nWays to Partition a Set\nBinomial Coefficient\nPascal‚Äôs Triangle\nNth Row of Pascal Triangle\nMin Sum in a Triangle\n\n\n\n\n\nHouse Robber\nMin Cost Path\nDecode Ways\nSubset Sum Problem\nCoin change problem - Count Ways\nCoin Change ‚Äì Minimum Coins to Make Sum\nPainting Fence Algorithm\nCutting a Rod\nJump Game\nLongest Common Substring\nCount all paths in a Grid\nPaths in a Grid with Obstacles\nPermutations with K Inversions\nMax A‚Äôs using Special Keyboard\n\n\n\n\n\nWater Overflow\nLongest Common Subsequence\nLongest Increasing Subsequence\nEdit Distance\nLargest Divisible Subset\nWeighted Job Schedulling\n0-1 Knapsack Problem\nPrinting Items in 0/1 Knapsack\nUnbounded Knapsack\nWord Break Problem\nTile Stacking Problem\nBox-Stacking Problem\nPartition Problem\nLongest Palindromic Subsequence\nLongest Common Increasing Subsequence (LCS + LIS)\nAll distinct subset (or subsequence) sums\nCount Derangements\nMinimum insertions for palindrome\nWildcard Pattern Matching\nRegular Expression Matching\nArrange Balls with adjacent of different types\nLongest Subsequence with 1 adjacent difference\nMaximum size square sub-matrix with all 1s\nBellman‚ÄìFord Algorithm\nFloyd Warshall Algorithm\nMaximum Tip Calculator\n\n\n\n\n\nLargest X Bordered Square\nEgg Dropping Problem\nPalindrome Partitioning\nPalindromic Substring Count\nWord Wrap Problem\nOptimal Strategy for a Game\nThe painter‚Äôs partition problem\nProgram for Bridge and Torch problem\nMatrix Chain Multiplication\nPrinting Matrix Chain Multiplication\nMaximum sum rectangle\nStock Buy and Sell - At-Most k Times\nStock Buy and Sell - At Most 2 Times\nMin cost to sort strings using Reversals\nCount of AP Subsequences\nDP on Trees\nMax Height of Tree when any Node can be Root\nLongest repeating and non-overlapping substring\nPalindrome Substrings Count\n\n\n\n\n\nGraph algorithms¬†are a set of techniques and methods used to solve problems related to graphs, which are a collection of nodes and edges. These algorithms perform various operations on graphs, such as¬†searching, traversing, finding the shortest path, and determining¬†connectivity. They are essential for solving a wide range of real-world problems, including¬†network routing,¬†social network analysis, and¬†resource allocation.\n\n\n\nGraph and its representations\n\n\n\n\n\nBreadth First Traversal\nDepth First Traversal\nDifference between BFS and DFS\nRotten Tomatoes\nIslands in a Graph\nFlood Fill\nCheck for Bipartite\nWord Ladder\nSnakes and Ladder\nWater Jug problem\nPacific Atlantic Water Flow\nShortest Path in Binary Matrix\nClone a Graph\nTransitive Closure of a Graph using DFS\n\n\n\n\n\nDetect Cycle in a Directed Graph\nDetect cycle in an undirected graph\nDetect cycle in a direct graph using colors\nDetect a negative cycle in a Graph | (Bellman Ford)\nCycles of length n in an undirected and connected graph\nDetecting negative cycle using Floyd Warshall\nClone a Directed Acyclic Graph\nUnion By Rank and Path Compression in Union-Find Algorithm\nIntroduction to Disjoint Set Data Structure or Union-Find Algorithm\n\n\n\n\n\nDijkstra‚Äôs shortest path algorithm\nBellman‚ÄìFord Algorithm\nFloyd Warshall Algorithm\nJohnson‚Äôs algorithm for All-pairs shortest paths\nShortest Path in Directed Acyclic Graph\nDial‚Äôs Algorithm\nMultistage Graph (Shortest Path)\nShortest path in an unweighted graph\nKarp‚Äôs minimum mean (or average) weight cycle algorithm\n0-1 BFS (Shortest Path in a Binary Weight Graph)\nFind minimum weight cycle in an undirected graph\n\n\n\n\n\nPrim‚Äôs Minimum Spanning Tree (MST)\nKruskal‚Äôs Minimum Spanning Tree Algorithm\nDifference between Prim‚Äôs and Kruskal‚Äôs algorithm for MST\nApplications of Minimum Spanning Tree Problem\nMinimum cost to connect all cities\nTotal number of Spanning Trees in a Graph\nMinimum Product Spanning Tree\nReverse Delete Algorithm for Minimum Spanning Tree\nBoruvka‚Äôs algorithm for Minimum Spanning Tree\n\n\n\n\n\nTopological Sorting\nAll topological sorts of a Directed Acyclic Graph\nKahn‚Äôs Algorithm for Topological Sorting\nMaximum edges that can be added to DAG so that is remains DAG\nLongest Path in a Directed Acyclic Graph\nTopological Sort of a graph using departure time of vertex\nFind Itinerary from a given list of tickets\n\n\n\n\n\nArticulation Points (or Cut Vertices) in a Graph\nBiconnected Components\nBridges in a graph\nEulerian path and circuit\nFleury‚Äôs Algorithm for printing Eulerian Path or Circuit\nStrongly Connected Components\nCount all possible walks from a source to a destination with exactly k edges\nEuler Circuit in a Directed Graph\nLength of shortest chain to reach the target word\nFind if an array of strings can be chained to form a circle\nTarjan‚Äôs Algorithm to find strongly connected Components\nPaths to travel each nodes using each edge (Seven Bridges of K√∂nigsberg)\nDynamic Connectivity | Set 1 (Incremental)\n\n\n\n\n\nMax Flow Problem Introduction\nFord-Fulkerson Algorithm for Maximum Flow Problem\nFind maximum number of edge disjoint paths between two vertices\nFind minimum s-t cut in a flow network\nMaximum Bipartite Matching\nChannel Assignment Problem\nIntroduction to Push Relabel Algorithm\nKarger‚Äôs Algorithm- Set 1- Introduction and Implementation\nDinic‚Äôs algorithm for Maximum Flow\n\n\n\n\n\nPattern Searching¬†is a fundamental technique in DSA used to find occurrences of a specific pattern within a larger text. The Pattern Searching Algorithms use techniques like¬†preprocessing¬†to minimize unnecessary comparisons, making the search faster.\n\n\n\nNaive String Matching : A Simple Algorithm that works in O(m x n) time where m is the length of the pattern and n is the length of the text.\nKnuth-Morris-Pratt (KMP) Algorithm It preprocesses pattern and works in O(m + n) Time.\nRabin-Karp Algorithm : It uses hashing to compare the pattern with the text. It works in O(m x n) Time in worst case,\nAho-Corasick Algorithm : A deterministic finite automaton (DFA) based algorithm and works in O(m + n) time.\n\n\n\n\n\nIntroduction to Pattern Searching\nNaive Pattern Searching\n\n\n\n\n\nRabin-Karp Algorithm\nKMP Algorithm\nZ algorithm\nFinite Automata\nBoyer Moore ‚Äì Bad Character Heuristic\nAho-Corasick Algorithm\nSuffix Array\nKasai‚Äôs Algorithm for LCP array from Suffix Array\nOnline algorithm for checking palindrome in a stream\nManacher‚Äôs Algorithm\nUkkonen‚Äôs Suffix Tree Construction ‚Äì Part 1\nGeneralized Suffix Tree\n\n\n\n\n\nFrequency of a Substring\nAnagram Substring Search\nCheck if Two Strings Rotations\nSubstrings with all Vowels\nSubstrings with only Given Character\nFind all Occurrences of a Subarray\nPattern Searching using a Trie of all Suffixes\nWildcard Pattern Matching\nRegular Expression Matching\nLongest prefix which is also suffix\nCount string in a 2D array\nFind all the patterns of ‚Äú1(0+)1‚Äù\nMax length prefix as Subsequence\nSearch a Word in a 2D Grid\nWord Search with Zig-Zag\nSuffix Tree Application 1 ‚Äì Substring Check\n\n\n\n\nPattern searching algorithms have numerous applications, including:\n\nText Processing: Searching for keywords in a document, finding and replacing text, spell checking, and plagiarism detection.\nInformation Retrieval: Finding relevant documents in a database, web search, and data mining.\nBioinformatics: Searching for DNA sequences in a genome, protein analysis, and gene expression analysis.\nNetwork Security: Detecting malicious patterns in network traffic, intrusion detection, and malware analysis.\nData Mining: Identifying patterns in large datasets, customer segmentation, and fraud detection.\n\n\n\n\n\nBranch and Bound Algorithm is a method used in combinatorial optimization problems to systematically search for the best solution. It works by dividing the problem into smaller subproblems, or branches, and then eliminating certain branches based on bounds on the optimal solution. This process continues until the best solution is found or all branches have been explored.\n\n\n\nBranch and Bound meaning in DSA\nIntroduction to Branch and Bound\nDifference between Backtracking and Branch-N-Bound\n\n\n\n\n\nBranch and Bound | Set 1 (Introduction with 0/1 Knapsack)\nBranch and Bound | Set 2 (Implementation of 0/1 Knapsack)\n0/1 Knapsack using Least Cost Branch and Bound\nBranch and Bound | Set 3 (8 puzzle Problem)\nBranch and Bound | Set 5 (N Queen Problem)\nBranch And Bound | Set 6 (Traveling Salesman Problem)\nJob Assignment Problem using Branch And Bound\nTravelling Salesman Problem (TSP) using Reduced Matrix Method\nGenerate Binary Strings of length N using Branch and Bound\n\n\n\n\n\nGeometric algorithms are a set of algorithms that solve problems related to¬†shapes,¬†points,¬†lines and polygons. Geometric algorithms are essential for solving a wide range of problems in computer science, such as intersection detection, convex hull computation, etc.\n\n\n\nWhat are Geometric Algorithms?\nPattern Printing\nLines\nTriangle\nRectangle | Square | Circle\nQuadrilateral\n3D Objects\nPolygon and Convex Hull\nStandard Problems on Geometric Algorithm\n\n\n\n\n\nPrint lower triangle with alternate ‚Äò*‚Äô and ‚Äò#‚Äô\nPrint the pattern 1*2*5*6 ‚Äì3*4\nPython Program to print the pattern ‚ÄòG‚Äô\nPascal‚Äôs Triangle\nProgram to print pyramid pattern\nProgram to print the diamond shape\nHour-glass Pattern\nProgram to print V and inverted-V pattern\nProgram to print hollow pyramid, diamond pattern and their modifications\nCode to Generate the Map of India (With Explanation)\n\n\n\n\n\nProgram to find the mid-point of a line\nSection formula (Point that divides a line in given ratio)\nProgram to find slope of a line\nProgram to find line passing through 2 Points\nProgram for Point of Intersection of Two Lines\nReflection of a point about a line in C++\nFind points at a given distance on a line of given slope\nGiven n line segments, find if any two segments intersect\nCount maximum points on same line\nMinimum lines to cover all points\n\n\n\n\n\nCheck whether triangle is valid or not if sides are given\nCheck whether a given point lies inside a triangle or not\nProgram to find area of a triangle\nCheck if right triangle possible from given area and hypotenuse\nCount Integral points inside a Triangle\nFind all angles of a given triangle\nProgram to find Circumcenter of a Triangle\nNumber of Triangles that can be formed given a set of lines in Euclidean Plane\nProgram to calculate area of Circumcircle of an Equilateral Triangle\nProgram to find third side of triangle using law of cosines\n\n\n\n\n\nCheck whether a given point lies inside a rectangle or not\nProgram for Area And Perimeter Of Rectangle\nFind if two rectangles overlap\nHow to check if given four points form a square\nNumber of rectangles in N*M grid\nProgram to find Circumference of a Circle\nProgram to find area of a circle\nCheck whether a point exists in circle sector or not\nCheck if two given circles touch or intersect each other\nProgram to find area of a Circular Segment\nCheck if a line touches or intersects a circle\nArea of a Circumscribed Circle of a Square\nFind minimum radius such that atleast k point lie inside the circle\nAngular Sweep (Maximum points that can be enclosed in a circle of given radius)\n\n\n\n\n\nNumber of parallelograms when n horizontal parallel lines intersect m vertical parallellines\nProgram for Circumference of a Parallelogram\nProgram to calculate area and perimeter of Trapezium\nProgram to find area of a Trapezoid\nFind all possible coordinates of parallelogram\nMaximum area of quadrilateral\nCheck whether four points make a parallelogram\nFind the Missing Point of Parallelogram\n\n\n\n\n\nFind the perimeter of a cylinder\nProgram for Volume and Surface area of Frustum of Cone\nProgram to calculate volume of Ellipsoid\nProgram for volume of Pyramid\nCalculate volume and surface area of a cone\nCalculate Volume and Surface area Of Sphere\nProgram for Volume and Surface Area of Cuboid\nProgram for Volume and Surface Area of Cube\nPythagorean Quadruple\nLS3/NS3 sphere generation algorithm and its implementation\n\n\n\n\n\nHow to check if a given point lies inside or outside a polygon?\nArea of a polygon with given n ordered vertices\nTangents between two Convex Polygons\nFind number of diagonals in n sided convex polygon\nConvex Hull using Jarvis‚Äô Algorithm or Wrapping\nQuickhull Algorithm for Convex Hull\nDeleting points from Convex Hull\nMinimum area of a Polygon with three points given\n\n\n\n\n\nFinding the vertex, focus\nand directrix of a parabola\nFind Simple Closed Path for a given set of points\nNumber of Integral Points between Two Points\nOptimum location of point to minimize total distance\nFind perimeter of shapes formed with 1s in binary matrix\nDraw geometric shapes on images using OpenCV\nFind if it‚Äôs possible to rotate the page by an angle or not\nEquable Shapes\n\n\n\n\n\nRandomized algorithms are algorithms that use¬†randomness to solve problems. They make use of random input to achieve their goals, often leading to¬†simpler and more¬†efficient solutions. These algorithms may¬†not product same result but are particularly useful in situations when a¬†probabilistic approach¬†is acceptable.\n\n\n\nIntroduction and Analysis\nClassification and Applications\n1/2 Approximate Median Example\n\n\n\n\n\nGenerates one of 3 according to given probabilities\nGenerate 0 and 1 with 25% and 75% probability\nImplement rand3() using rand2()\nBirthday Paradox\nExpected Value of an array\nShuffle a deck of cards\nGenerate CAPTCHA and verify\nIndex of max occurring with equal probability\nRandomized Binary Search\n\n\n\n\n\nMake a fair coin from a biased coin\nShuffle a given array using Fisher‚ÄìYates shuffle Algorithm\nExpected Number of Trials until Success\nStrong Password Suggester Program\nQuickSort using Random Pivoting\nOperations on Sparse Matrices\nEstimating the value of Pi using Monte Carlo\nImplement rand12() using rand6() in one line\n\n\n\n\n\nGenerate integer from 1 to 7 with equal probability\nImplement random-0-6-Generator using the given random-0-1-Generator\nSelect a random number from stream, with O(1) space\nRandom number generator in arbitrary probability distribution fashion\nReservoir Sampling\nLinearity of Expectation\nIntroduction and implementation of Karger‚Äôs algorithm for Minimum Cut\nSelect a Random Node from a Singly Linked List\nSelect a Random Node from a tree with equal probability\nFreivald‚Äôs Algorithm to check if a matrix is product of two\nRandom Acyclic Maze Generator with given Entry and Exit point"
  },
  {
    "objectID": "coding.html#what-is-an-algorithm",
    "href": "coding.html#what-is-an-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "An algorithm is a finite sequence of well-defined instructions that can be used to solve a computational problem. It provides a step-by-step procedure that convert an input into a desired output.\nAlgorithms typically follow a logical structure:\n\nInput: The algorithm receives input data.\nProcessing: The algorithm performs a series of operations on the input data.\nOutput: The algorithm produces the desired output."
  },
  {
    "objectID": "coding.html#what-is-the-need-for-algorithms",
    "href": "coding.html#what-is-the-need-for-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Algorithms are essential for solving complex computational problems efficiently and effectively. They provide a systematic approach to:\n\nSolving problems: Algorithms break down problems into smaller, manageable steps.\nOptimizing solutions: Algorithms find the best or near-optimal solutions to problems.\nAutomating tasks: Algorithms can automate repetitive or complex tasks, saving time and effort."
  },
  {
    "objectID": "coding.html#analysis-of-algorithms",
    "href": "coding.html#analysis-of-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Analysis of Algorithms is the process of evaluating the efficiency of algorithms, focusing mainly on the time and space complexity. This helps in evaluating how the algorithm‚Äôs running time or space requirements grow as the size of input increases.\n\n\n\nWhy is Analysis Important?\nOrder of Growth\nAsymptotic Analysis\nWorst, Average and Best Cases of Algorithms\n\n\n\n\n\nBig-O Notation\nTheta - Œò Notation\nBig ‚Äì ‚Ñ¶ (Big- Omega) Notation\nTime Complexity\nSpace Complexity\nDifference between Big Oh, Big Omega and Big Theta\nExamples of Big-O analysis\nDifference between big O notations and tilde\nPractice Questions on Time Complexity Analysis\n\n\n\n\n\nAnalyzing Loops\nAnalyzing Recursive Functions\nAmortized Analysis"
  },
  {
    "objectID": "coding.html#mathematical-algorithms",
    "href": "coding.html#mathematical-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Mathematical algorithms are used for analyzing and optimizing data structures and algorithms. Knowing basic concepts like¬†divisibility,¬†LCM,¬†GCD, etc. can really help you understand how data structures work and improve your ability to design efficient algorithms.\n\n\n\nNumbers\nPrime Numbers\nArithmetic Progression\nGeometric Progression\nGCD and LCM\nFactorial\nPermutation and Combination\nCatalan Number\nModular Arithmetic\n\n\n\n\n\nSum of Naturals\nSum of Squares of Naturals\nNth Term of AP\nNth Term of GP\nNth Triangular Number\nSum of Sums of Natural Numbers\nCount Digits\nSum of Digits\nReverse Digits\nK-th Digit in a^b\nPalindrome Number\nGCD of Two Numbers\nLCM of Two Numbers\nAdd two fractions\nCheck for Co-Prime\nFactorial of a Number\nGCD of more than 2\nLCM of more than 2\nPadovan Sequence\n\n\n\n\n\nPair Cube Count\nSum of 2, 22, 222, ‚Ä¶‚Ä¶‚Ä¶\nSum of 1^2 + 3^2 + 5^2 + . . . + (2*n ‚Äì 1)^2\nSum of 0.6, 0.06, 0.006, 0.0006, ‚Ä¶to n terms\nn-th term of 2, 12, 36, 80, 150‚Ä¶.\nDigit Root\nFibonacci Numbers\nLucas Number\nCheck for Power\nThree Divisors\nSquare Root\nBinomial Coefficient\nPascal Triangle\nnth Row of the Pascal Triangle\nArmstrong Numbers\nDeterminant of a Matrix\nModular Exponentiation\nCheck for Perfect Squares\nDivisibility by 3\nDivisibility by 4\nDivisibility by 7\nDivisibility by 11\nDivisibility by 13\nDivisibility by 29\n\n\n\n\n\nLinear Diophantine Equations\nEuler‚Äôs Totient Function\nSieve of Eratosthenes\nAll Divisors\nPrime Factorization\nLargest Prime Factor\nFactorial of a Large Number\nLargest Power Divisible in Factorial\nLast Non-zero Digit of Factorial\nPower Set\nAdd Two Polynomials\nAll Permutations of a String\nNext Permutation\nCheck for Carmichael Numbers\nCollatz sequence\nGrid Unique Paths\nNth Even Fibonacci Number\nLast 2 Digits of Nth Fibonacci\n\n\n\n\n\nJosephus Problem\nWater Jug Tutorial\nSegmented Sieve\nk-th prime factor\nN-th Root\nSum of Digits in Factorial\nEgg Dropping\nNext String"
  },
  {
    "objectID": "coding.html#bitwise-algorithms",
    "href": "coding.html#bitwise-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Bitwise algorithms are algorithms that operate on individual bits of numbers. These algorithms manipulate the binary representation of numbers like¬†shifting bits,¬†setting or¬†clearing specific bits of a number and perform¬†bitwise operations¬†(AND, OR, XOR). Bitwise algorithms are commonly used in¬†low-level programming, cryptography, and optimization tasks¬†where efficient manipulation of individual bits is required.\n\n\n\nIntroduction to Bitwise Algorithms\nBitwise Operators in C/C++\nBitwise Operators in Java\nPython Bitwise Operators\nJavaScript Bitwise Operators\nAll about Bit Manipulation\nLittle and Big Endian Mystery\n\n\n\n\n\nBits manipulation (Important tactics)\nBitwise Hacks for Competitive Programming\n\n\n\n\n\nBinary Representation\nTurn off the rightmost set bit\nCheck if K-th Bit Set\nSet the K-th Bit\nModulus division by 2‚Äôs Power\nOdd Occurring Number\nPower of two\nThe only set bit\nAdd Bit Strings\nCheck for Integer Overflow\nXOR without using XOR\nCheck for Equal\nCheck for opposite signs\nSwap Two Numbers\nRussian Peasant\n\n\n\n\n\nMost Significant Set Bit\nRightmost Set Bit\nCount Set Bits\nSwap Bits\nRotate Bits\nSmallest of Three\nMinimum without branching\nSmallest power of 2 greater than or equal to n\nProgram to find parity\nCheck if binary is palindrome\nGenerate n-bit Gray Codes\nCheck for Sparse\nEuclid when % and / are costly\nSquare without using *, / and pow()\nCyclic Redundancy Check and Modulo-2 Division\nSet Bits in a Range\nCheck for Bleak\nGray to Binary and Vice Versa\n\n\n\n\n\nNext higher with same set bits\nKaratsuba Algorithm for fast Multiplication\nMax Subarray XOR\nLongest Sequence of 1‚Äôs in Binary with One Flip\nClosest Smaller and greater with same set bits\nBitmasking and Dynamic Programming\nCompute the Parity\nXOR Encryption by Shifting Plaintext\nCount pairs with at least one digit common\nFloating to Binary\nBooth‚Äôs Multiplication Algorithm\nPairs with Pandigital Concatenation\nn-th number whose binary is a palindrome\nTwo non-repeating in an array of repeating\n\n\n\n\nBitwise algorithms are algorithms that operate on individual bits of data rather than on larger data types like integers or floating-point numbers. These algorithms manipulate bits directly, typically using bitwise operators such as AND, OR, XOR, shift left, shift right, and complement.\n\n\n\nHere are some common bitwise algorithms and operations:\n\nBitwise AND (&): Takes two numbers as input and performs a bitwise AND operation on their corresponding bits. It returns 1 only if both bits are 1; otherwise, it returns 0.\nBitwise OR (|): Performs a bitwise OR operation on the corresponding bits of two numbers. It returns 1 if at least one of the bits is 1.\nBitwise XOR (^): Performs a bitwise exclusive OR operation on the corresponding bits of two numbers. It returns 1 if the bits are different and 0 if they are the same.\nBitwise NOT (~): Performs a bitwise NOT operation, which flips each bit of the input (1 becomes 0 and 0 becomes 1).\nLeft Shift (&lt;&lt;) and Right Shift (&gt;&gt;): These operators shift the bits of a number to the left or right by a specified number of positions. Left shifting is equivalent to multiplying the number by 2, while right shifting is equivalent to dividing by 2.\n\n\n\n\n\nBit manipulation (setting, clearing, toggling bits): Bitwise operators are often used to manipulate individual bits of numbers. This includes tasks such as setting bits (using OR), clearing bits (using AND with the complement), toggling bits (using XOR with 1), and checking the value of a specific bit.\nEfficient storage of data: Bitwise algorithms play a crucial role in data compression techniques like Huffman coding. They can efficiently represent and process compressed data by manipulating bits directly.\nCryptography: Many cryptographic algorithms, such as AES (Advanced Encryption Standard), DES (Data Encryption Standard), and SHA (Secure Hash Algorithm), utilize bitwise operations for encryption, decryption, and hashing. Bitwise XOR, in particular, is commonly used in encryption algorithms for its simplicity and effectiveness.\nNetworking and Protocol Handling: Bitwise algorithms are used in networking protocols for tasks like IP address manipulation, subnet masking, and packet parsing. For example, bitwise AND is used in subnet masking to determine the network address from an IP address and subnet mask.\nLow-Level System Programming: Bitwise operations are essential in low-level system programming for tasks such as device control, memory management, and bit-level I/O operations. They are used to manipulate hardware registers, set/clear flags, and optimize code for performance.\nError Detection and Correction: Bitwise algorithms are employed in error detection and correction techniques, such as CRC (Cyclic Redundancy Check) and Hamming codes. These algorithms use bitwise XOR and other operations to detect and correct errors in transmitted data."
  },
  {
    "objectID": "coding.html#searching-algorithms",
    "href": "coding.html#searching-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Searching Algorithms are used to find a specific element or item in a collection of data. These algorithms are widely used to retrieve data efficiently from large datasets.\n\n\n\nLinear Search\nBinary Search\nTwo Pointers Technique\n\n\n\n\n\nbinary_search, lower_bound and upper_bound in C++\nArrays.binarySearch() in Java\nArrays.binarySearch() in Java for Search in subarray\nCollections.binarySearch() in Java\nBisect in Python\nList.BinarySearch in C#\n\n\n\n\n\nLargest in an Array\nSecond Largest in an array\nLargest three in an array\nMissing Number\nFirst Repeating\nMissing and Repeating\nCount 1‚Äôs in a sorted binary array\nClosest to 0 Sum Pair\nPair with the given difference\nk largest(or smallest) Elements\nKth smallest in row and column-wise sorted\nCommon elements in 3 sorted\nCeiling in a sorted\nFloor in a Sorted\nMaximum in a Bitonic\nElements that appear more than n/k times\n\n\n\n\n\nTriplets with zero sum\nPartition Point\nLargest pair sum\nK‚Äôth Smallest in Unsorted Array\nSearch an in a sorted and rotated\nMin in a sorted and rotated\nMax in a sorted and rotated\nPeak element\nMax and min using minimum comparisons\nFind a Fixed Point in a given array\nK most frequent words from a file\nK closest elements\n2 Sum ‚Äì Pair Sum Closest to Target in Sorted Array\nClosest pair from two sorted arrays\nThree closest from three sorted arrays\nBinary Search for Rationals\nMissing Element in AP\n\n\n\n\n\nMedian of two sorted arrays\nMedian of two sorted of different sizes\nSearch in an almost sorted array\nSearch in a sorted infinite array\nPair sum in a sorted and rotated array\nK‚Äôth Smallest/Largest Element in Unsorted Array\nK‚Äôth largest element in a stream\nBest First Search (Informed Search)\n\n\n\n\n\nSentinel Linear Search\nMeta Binary Search | One-Sided Binary Search\nTernary Search\nJump Search\nInterpolation Search\nExponential Search\nFibonacci Search\nThe Ubiquitous Binary Search\n\n\n\n\n\nLinear Search vs Binary Search\nInterpolation search vs Binary search\nWhy is Binary Search preferred over Ternary Search?\nIs Sentinel Linear Search better than normal Linear Search?"
  },
  {
    "objectID": "coding.html#sorting-algorithms",
    "href": "coding.html#sorting-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Sorting algorithms¬†are used to¬†arrange the elements of a list in a¬†specific order, such as numerical or alphabetical. It organizes the items in a systematic way, making it easier to search for and access specific elements.\n\n\n\nIntroduction to Sorting\nApplications of Sorting\n\n\n\n\nComparison Based : Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Quick Sort, Heap Sort, Cycle Sort, 3-way Merge Sort\nNon Comparison Based : Counting Sort, Radix Sort, Bucket Sort, TimSort, Comb Sort, Pigeonhole Sort\nHybrid Sorting Algorithms : IntroSort, Tim Sort\n\n\n\n\nqsort() in C\nsort() in C++ STL\nArrays.sort() in Java with examples\nCollections.sort() in Java with Examples\nSort a List in Python\nSorting in JavaScript\n\n\n\n\n\nCheck if an array is Sorted\nSort an array of two types\nSort a String\nSort Each Row of a Matrix\nSort a Matrix\nSort a Linked List\nSort in Wave Form\nSort by Frequency\nSort from Different Machines\nCheck if any two intervals overlap\nMissing elements of a range\nSort by set bits counts\nSort even and odd placed in different orders\nSorting Big Integers\nSort strings by lengths\nMerge Two Sorted Arrays\nSort when two halves are sorted\n2 Sum - Pair in a Sorted Array\nIntersection of two sorted arrays\nUnion of two sorted arrays\nMeeting Rooms\n\n\n\n\n\nMinimum Increments to Make Unique\nMerge Overlapping Intervals\nMinimum Platforms\nClosest Pair of Elements\nClosest Pair of Points\nChocolate Distribution Problem\nMin and Max Amount to Buy All\nThree Way Partitioning\nSort an array of 0s, 1s and 2s\nSort a linked list of 0s, 1s and 2s\nInversion count\nK-th Smallest Element\nK Smallest Elements\n3 Sum - Find Any\n3 Sum - Closest Triplet\nSmallest Difference Triplet from Three arrays\nMerge K Sorted Arrays\nMerge K Sorted Linked Lists\nMin Unsorted Subarray to make array sorted\nSort a nearly sorted array\nSort n numbers in range from 0 to n^2 ‚Äì 1\nSort an array of 1 to n\nSort according to order defined by another\nMaximum intervals overlap\nPermutation with worst Case of Merge Sort\nMinimum swaps to make two arrays identical\nPermute two arrays such that all pair suns are greater than K\nBucket Sort To Sort an Array with Negative Numbers\nConvert an Array to reduced form using Vector of pairs\nCheck if array can be sorted with conditional swapping of adjacent\n4 Sum - Find Any [More problems an 4 Sum are in Hard Section]\n\n\n\n\n\nMerge Without Extra Space\nTop K Frequent Elements\n3 Sum - Distinct Triplets\n4 Sum - Distinct Quadruples\n4 Sum - All Quadruples\n4 Sum - Closest Quadruple\nSurpasser Counts in an Array\nCount distinct occurrences as a subsequence\nMinimum consecutive number subsets\nMinimum swaps for Binary Tree to BST\nK-th smallest element after removing some integers from natural numbers\nMax frequency diff such greater freq item is also is also greater\nMin swaps to reach permuted array with at most 2 positions left swaps allowed\nMaking Array Elements Same\nSort an array after applying an equation\nArray of strings in sorted order without copying strings"
  },
  {
    "objectID": "coding.html#recursion",
    "href": "coding.html#recursion",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Recursion¬†is a programming technique where a function¬†calls itself¬†within its own definition. It is usually used to solve problems that can be broken down into smaller instances of the same problem.\n\n\n\nIntroduction to Recursion\nRecursion vs Iteration\nFinite and Infinite Recursion\nWhat is Tail Recursion\nTail Recursion Optimization\n\n\n\n\n\nRecursion in Python\nRecursion in Java\nRecursion in C#\nRecursion in JavaScript\n\n\n\n\n\nPrint 1 to n without loop\nPrint n to 1 without loop\nMean of Array using Recursion\nSum of natural numbers using recursion\nDecimal to binary number using recursion\nSum of array elements using recursion\nPrint reverse of a string using recursion\nProgram for length of a string using recursion\nSum of digit of a number using recursion\nTail recursion to calculate sum of array elements.\nProgram to print first n Fibonacci Numbers | Set 1\nFactorial of a number\nArray Min and Max using Recursion\nPalindrome Check using Recursion\nCount Set-bits using Recursion\nFibonacci Series in reverse order using Recursion\n\n\n\n\n\nRecursively remove all adjacent duplicates\nSort the Queue using Recursion\nReversing a queue using recursion\nCoin Change\nBinary to Gray code using recursion\nDelete a linked list using recursion\nProduct of 2 Numbers using Recursion\nPrograms for Printing Pyramid Patterns using Recursion\nLength of longest palindromic sub-string : Recursion\nProgram for Tower of Hanoi Algorithm\nTime Complexity Analysis | Tower Of Hanoi (Recursion)\nProgram to calculate value of nCr using Recursion\nFind geometric sum of the series using recursion\nConvert a String to an Integer using Recursion\nDFS traversal of a Tree\nBottom View of a Binary Tree using Recursion\nWrite a program to print all Permutations of given String\nPrint all subsets of a given Set or Array\nPrint all possible paths from top left to bottom right of a mXn matrix\nPrint all combinations of balanced parentheses\nLongest Common Subsequence (LCS)\n\n\n\n\n\nFind the value of a number raised to its reverse\nHow to Sort a Stack using Recursion\nReverse a Doubly linked list using recursion\nGiven a string, print all possible palindromic partitions\nCheck if a string is a scrambled form of another string\nWord Break Problem | DP-32\nPrint all palindromic partitions of a string\nN Queen Problem | Backtracking-3\nAlgorithm to Solve Sudoku | Sudoku Solver\nThe Knight‚Äôs tour problem\n\n\n\n\nA recursive algorithm is an algorithm that uses recursion to solve a problem. Recursive algorithms typically have two parts:\n\nBase case: Which is a condition that stops the recursion.\nRecursive case: Which is a call to the function itself with a smaller version of the problem.\n\n\n\n\nThere are several different recursion types and terms. These include:\n\nDirect recursion: This is typified by the factorial implementation where the methods call itself.\nIn-Direct recursion: This happens where one method, say method A, calls another method B, which then calls method A. This involves two or more methods that eventually create a circular call sequence.\nHead recursion: The recursive call is made at the beginning of the method.\nTail recursion: The recursive call is the last statement.\n\n\n\n\nHere are some common applications of recursion:\n\nTree and Graph Traversal: Depth-first search (DFS) and breadth-first search (BFS)\nDynamic Programming: Solving optimization problems by breaking them into smaller subproblems\nDivide-and-Conquer: Solving problems by dividing them into smaller parts, solving each part recursively, and combining the results\nBacktracking: Exploring all possible solutions to a problem by recursively trying different options\nCombinatorics: Counting or generating all possible combinations or permutations of a set\n\n\n\n\nRecursion is a powerful technique that can be used to solve a wide variety of problems. However, it is important to use recursion carefully, as it can lead to stack overflows if not used properly.\nRecursion should be used when:\n\nThe problem can be broken down into smaller subproblems that can be solved recursively.\nThe base case is easy to identify.\nThe recursive calls are tail recursive."
  },
  {
    "objectID": "coding.html#backtracking-algorithm",
    "href": "coding.html#backtracking-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Backtracking Algorithm is derived from the¬†Recursion algorithm, with the option to¬†revert if a recursive solution fails, i.e.¬†in case a solution fails, the program¬†traces back¬†to the moment where it failed and builds on another solution. So basically it tries out all the possible solutions and finds the correct one.\n\n\n\nIntroduction to Backtracking\nBacktracking vs Recursion\nBacktracking vs Branch and Bound\n\n\n\n\n\nPermutations of a String\nThe Knight‚Äôs tour problem\nRat in a Maze\nN Queen Problem | Backtracking-3\nSubset Sum problem\nm Coloring Problem\nHamiltonian Cycle\nSudoku | Backtracking-7\nMagnet Puzzle\nRemove Invalid Parentheses\nA backtracking approach to generate n bit Gray Codes\n\n\n\n\n\nBacktracking to find all subsets\nCheck if a given string is sum-string\nCount all possible paths between two vertices\nFind all distinct subsets of a given set\nFind if there is a path of more than k length from a source\nPrint all paths from a given source to a destination\nPrint all possible strings that can be made by placing spaces\n\n\n\n\n\nTug of War\n8 queen problem\nCombinational Sum\nWarnsdorff‚Äôs algorithm for Knight‚Äôs tour problem\nFind paths from corner cell to middle cell in maze\nFind Maximum number possible by doing at-most K swaps\nRat in a Maze with multiple steps or jump allowed\nN Queen in O(n) space\n\n\n\n\n\nPower Set in Lexicographic order\nWord Break Problem using Backtracking\nPartition of a set into K subsets with equal sum\nLongest Possible Route in a Matrix with Hurdles\nFind shortest safe route in a path with landmines\nPrint all palindromic partitions of a string\nPrinting all solutions in N-Queen Problem\nPrint all longest common sub-sequences in lexicographical order\n\n\n\n\nBacktracking is a problem-solving algorithmic technique that involves finding a solution incrementally by trying¬†different options¬†and¬†undoing¬†them if they lead to a¬†dead end.\nIt is commonly used in situations where you need to explore multiple possibilities to solve a problem, like searching for a path in a maze or solving puzzles like Sudoku. When a dead end is reached, the algorithm backtracks to the previous decision point and explores a different path until a solution is found or all possibilities have been exhausted.\n\n\n\nA backtracking algorithm works by recursively exploring all possible solutions to a problem. It starts by choosing an initial solution, and then it explores all possible extensions of that solution. If an extension leads to a solution, the algorithm returns that solution. If an extension does not lead to a solution, the algorithm backtracks to the previous solution and tries a different extension.\nThe following is a general outline of how a backtracking algorithm works:\n\nChoose an initial solution.\nExplore all possible extensions of the current solution.\nIf an extension leads to a solution, return that solution.\nIf an extension does not lead to a solution, backtrack to the previous solution and try a different extension.\nRepeat steps 2-4 until all possible solutions have been explored.\n\n\n\n\nExample: Finding the shortest path through a maze\nInput: A maze represented as a 2D array, where 0 represents an open space and 1 represents a wall.\nAlgorithm:\n\nStart at the starting point.\nFor each of the four possible directions (up, down, left, right), try moving in that direction.\nIf moving in that direction leads to the ending point, return the path taken.\nIf moving in that direction does not lead to the ending point, backtrack to the previous position and try a different direction.\nRepeat steps 2-4 until the ending point is reached or all possible paths have been explored.\n\n\n\n\nBacktracking algorithms are best used to solve problems that have the following characteristics:\n\nThere are multiple possible solutions to the problem.\nThe problem can be broken down into smaller subproblems.\nThe subproblems can be solved independently.\n\n\n\n\nBacktracking algorithms are used in a wide variety of applications, including:\n\nSolving puzzles (e.g., Sudoku, crossword puzzles)\nFinding the shortest path through a maze\nScheduling problems\nResource allocation problems\nNetwork optimization problems\nCombinatorial problems, such as generating permutations, combinations, or subsets."
  },
  {
    "objectID": "coding.html#divide-and-conquer-algorithm",
    "href": "coding.html#divide-and-conquer-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Divide and conquer algorithms follow a recursive strategy to solve problems by dividing them into¬†smaller subproblems, solving those subproblems, and combining the solutions to obtain the final solution.\n\n\n\nIntroduction to Divide and Conquer\nDynamic Programming vs Divide-and-Conquer\nDecrease and Conquer\nAdvanced master theorem for divide and conquer recurrences\n\n\n\n\n\nBinary Search\nMerge Sort\nQuick Sort\nCalculate pow(x, n)\nKaratsuba algorithm for fast multiplication\nStrassen‚Äôs Matrix Multiplication\nConvex Hull (Simple Divide and Conquer Algorithm)\nQuickhull Algorithm for Convex Hull\n\n\n\n\n\nSquare root of an integer\nMaximum and minimum of an array using minimum number of comparisons\nFind frequency of each element in a limited range array in less than O(n) time\nTiling Problem\nCount Inversions\nThe Skyline Problem\nSearch in a Row-wise and Column-wise Sorted 2D Array\nAllocate minimum number of pages\nModular Exponentiation (Power in Modular Arithmetic)\n\n\n\n\n\nBinary Search Based Problems\nMerge Sort Based Problems\nQuick Sort Based Problems"
  },
  {
    "objectID": "coding.html#greedy-algorithm",
    "href": "coding.html#greedy-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Greedy Algorithm builds up the solution one piece at a time and chooses the next piece which gives the most obvious and immediate benefit i.e., which is the most¬†optimal choice at that moment. So the problems where choosing¬†locally optimal¬†also leads to the global solutions are best fit for Greedy.\n\n\n\nIntroduction to Greedy Algorithm\nGreedy Algorithms General Structure\n\n\n\n\n\nFractional Knapsack\nMin Cost to Make Array Size 1\nMin Rotations for Circular Lock\nMax Composite Numbers to Make n\nSmallest Subset Greater Sum\nAssign Cookies\nBuy Maximum Stocks\nMax Consecutive Diff Sum\nMin and Max Costs to buy all\nMin Notes with Given Sum\nMax Equal Sum of Three Stacks\n\n\n\n\n\nActivity Selection Problem\nJump Game\nJob Sequencing Problem\nEgyptian Fraction\nMerge Overlapping Intervals\nMin Fibonacci Terms with Sum K\nMinimum Platforms\nMin Cost to Connect n ropes\nMax trains\nPartition 1 to n into two min diff groups\nPaper cut into min squares\nMin diff groups of size two\nMax Satisfied Customers\nMin initial vertices to traverse matrix with constraints\nLargest palindromic number by permuting digits\nSmallest with n digits and digits sum\nLexicographically largest subsequence with every char at least k times\n\n\n\n\n\nMinimize the Max Height Diff\nMaking max equal with k updates\nMinimize cash flow among friends\nMinimum Cost to cut a board into squares\nMinimum cost to process m tasks where switching costs\nMinimum time to finish all jobs with given constraints\nMinimize the maximum difference between the heights of towers\nMinimum edges to reverse to make path from a source to a destination\nFind the Largest Cube formed by Deleting minimum Digits from a number\nRearrange characters in a string such that no two adjacent are same\nRearrange a string so that all same characters become d distance away\n\n\n\n\n\nActivity Selection Problem\nJob Sequencing Problem\nHuffman Coding\nHuffman Decoding\nWater Connection Problem\nMinimum Swaps for Bracket Balancing\nEgyptian Fraction\nPolicemen catch thieves\nFitting Shelves Problem\nAssign Mice to Holes\n\n\n\n\n\nMinimum product subset of an array\nMaximize array sum after K negations using Sorting\nMinimum sum of product of two arrays\nMinimum sum of absolute difference of pairs of two arrays\nMinimum increment/decrement to make array non-Increasing\nSorting array with reverse around middle\nSum of Areas of Rectangles possible for an array\nLargest lexicographic array with at-most K consecutive swaps\nPartition into two subarrays of lengths k and (N ‚Äì k) such that the difference of sums is maximum\n\n\n\n\n\nFirst Fit algorithm in Memory Management\nBest Fit algorithm in Memory Management\nWorst Fit algorithm in Memory Management\nShortest Job First Scheduling\nJob Scheduling with two jobs allowed at a time\nProgram for Optimal Page Replacement Algorithm\n\n\n\n\n\nKruskal‚Äôs Minimum Spanning Tree\nPrim‚Äôs Minimum Spanning Tree\nBoruvka‚Äôs Minimum Spanning Tree\nDijkastra‚Äôs Shortest Path Algorithm\nDial‚Äôs Algorithm\nMinimum cost to connect all cities\nMax Flow Problem Introduction\nNumber of single cycle components in an undirected graph\n\n\n\n\n\nSet cover problem\nBin Packing Problem\nGraph Coloring\nK-centers problem\nShortest superstring problem\nApproximate solution for Travelling Salesman Problem using MST\n\n\n\n\n\nFractional Knapsack Problem\nMinimum number of coins required"
  },
  {
    "objectID": "coding.html#dynamic-programming",
    "href": "coding.html#dynamic-programming",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Dynamic Programming¬†is a method used to solve complex problems by breaking them down into simpler¬†subproblems. By solving each subproblem only¬†once and¬†storing the results, it avoids redundant computations, leading to more¬†efficient solutions for a wide range of problems.\n\n\n\nIntroduction to DP\nTabulation vs Memoizatation\nSteps to solve a DP Problem\n\n\n\n\n\nFibonacci numbers\nTribonacci Numbers\nLucas Numbers\nClimbing Stairs\nClimbing Stairs with 3 Moves\nWeighted Climbing Stairs\nMaximum Segments\nnth Catalan Number\nCount Unique BSTs\nCount Valid Parenthesis\nWays to Triangulate a Polygon\nMin Sum in a Triangle\nMinimum Perfect Squares\nWays to Partition a Set\nBinomial Coefficient\nPascal‚Äôs Triangle\nNth Row of Pascal Triangle\nMin Sum in a Triangle\n\n\n\n\n\nHouse Robber\nMin Cost Path\nDecode Ways\nSubset Sum Problem\nCoin change problem - Count Ways\nCoin Change ‚Äì Minimum Coins to Make Sum\nPainting Fence Algorithm\nCutting a Rod\nJump Game\nLongest Common Substring\nCount all paths in a Grid\nPaths in a Grid with Obstacles\nPermutations with K Inversions\nMax A‚Äôs using Special Keyboard\n\n\n\n\n\nWater Overflow\nLongest Common Subsequence\nLongest Increasing Subsequence\nEdit Distance\nLargest Divisible Subset\nWeighted Job Schedulling\n0-1 Knapsack Problem\nPrinting Items in 0/1 Knapsack\nUnbounded Knapsack\nWord Break Problem\nTile Stacking Problem\nBox-Stacking Problem\nPartition Problem\nLongest Palindromic Subsequence\nLongest Common Increasing Subsequence (LCS + LIS)\nAll distinct subset (or subsequence) sums\nCount Derangements\nMinimum insertions for palindrome\nWildcard Pattern Matching\nRegular Expression Matching\nArrange Balls with adjacent of different types\nLongest Subsequence with 1 adjacent difference\nMaximum size square sub-matrix with all 1s\nBellman‚ÄìFord Algorithm\nFloyd Warshall Algorithm\nMaximum Tip Calculator\n\n\n\n\n\nLargest X Bordered Square\nEgg Dropping Problem\nPalindrome Partitioning\nPalindromic Substring Count\nWord Wrap Problem\nOptimal Strategy for a Game\nThe painter‚Äôs partition problem\nProgram for Bridge and Torch problem\nMatrix Chain Multiplication\nPrinting Matrix Chain Multiplication\nMaximum sum rectangle\nStock Buy and Sell - At-Most k Times\nStock Buy and Sell - At Most 2 Times\nMin cost to sort strings using Reversals\nCount of AP Subsequences\nDP on Trees\nMax Height of Tree when any Node can be Root\nLongest repeating and non-overlapping substring\nPalindrome Substrings Count"
  },
  {
    "objectID": "coding.html#graph-algorithms",
    "href": "coding.html#graph-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Graph algorithms¬†are a set of techniques and methods used to solve problems related to graphs, which are a collection of nodes and edges. These algorithms perform various operations on graphs, such as¬†searching, traversing, finding the shortest path, and determining¬†connectivity. They are essential for solving a wide range of real-world problems, including¬†network routing,¬†social network analysis, and¬†resource allocation.\n\n\n\nGraph and its representations\n\n\n\n\n\nBreadth First Traversal\nDepth First Traversal\nDifference between BFS and DFS\nRotten Tomatoes\nIslands in a Graph\nFlood Fill\nCheck for Bipartite\nWord Ladder\nSnakes and Ladder\nWater Jug problem\nPacific Atlantic Water Flow\nShortest Path in Binary Matrix\nClone a Graph\nTransitive Closure of a Graph using DFS\n\n\n\n\n\nDetect Cycle in a Directed Graph\nDetect cycle in an undirected graph\nDetect cycle in a direct graph using colors\nDetect a negative cycle in a Graph | (Bellman Ford)\nCycles of length n in an undirected and connected graph\nDetecting negative cycle using Floyd Warshall\nClone a Directed Acyclic Graph\nUnion By Rank and Path Compression in Union-Find Algorithm\nIntroduction to Disjoint Set Data Structure or Union-Find Algorithm\n\n\n\n\n\nDijkstra‚Äôs shortest path algorithm\nBellman‚ÄìFord Algorithm\nFloyd Warshall Algorithm\nJohnson‚Äôs algorithm for All-pairs shortest paths\nShortest Path in Directed Acyclic Graph\nDial‚Äôs Algorithm\nMultistage Graph (Shortest Path)\nShortest path in an unweighted graph\nKarp‚Äôs minimum mean (or average) weight cycle algorithm\n0-1 BFS (Shortest Path in a Binary Weight Graph)\nFind minimum weight cycle in an undirected graph\n\n\n\n\n\nPrim‚Äôs Minimum Spanning Tree (MST)\nKruskal‚Äôs Minimum Spanning Tree Algorithm\nDifference between Prim‚Äôs and Kruskal‚Äôs algorithm for MST\nApplications of Minimum Spanning Tree Problem\nMinimum cost to connect all cities\nTotal number of Spanning Trees in a Graph\nMinimum Product Spanning Tree\nReverse Delete Algorithm for Minimum Spanning Tree\nBoruvka‚Äôs algorithm for Minimum Spanning Tree\n\n\n\n\n\nTopological Sorting\nAll topological sorts of a Directed Acyclic Graph\nKahn‚Äôs Algorithm for Topological Sorting\nMaximum edges that can be added to DAG so that is remains DAG\nLongest Path in a Directed Acyclic Graph\nTopological Sort of a graph using departure time of vertex\nFind Itinerary from a given list of tickets\n\n\n\n\n\nArticulation Points (or Cut Vertices) in a Graph\nBiconnected Components\nBridges in a graph\nEulerian path and circuit\nFleury‚Äôs Algorithm for printing Eulerian Path or Circuit\nStrongly Connected Components\nCount all possible walks from a source to a destination with exactly k edges\nEuler Circuit in a Directed Graph\nLength of shortest chain to reach the target word\nFind if an array of strings can be chained to form a circle\nTarjan‚Äôs Algorithm to find strongly connected Components\nPaths to travel each nodes using each edge (Seven Bridges of K√∂nigsberg)\nDynamic Connectivity | Set 1 (Incremental)\n\n\n\n\n\nMax Flow Problem Introduction\nFord-Fulkerson Algorithm for Maximum Flow Problem\nFind maximum number of edge disjoint paths between two vertices\nFind minimum s-t cut in a flow network\nMaximum Bipartite Matching\nChannel Assignment Problem\nIntroduction to Push Relabel Algorithm\nKarger‚Äôs Algorithm- Set 1- Introduction and Implementation\nDinic‚Äôs algorithm for Maximum Flow"
  },
  {
    "objectID": "coding.html#pattern-searching",
    "href": "coding.html#pattern-searching",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Pattern Searching¬†is a fundamental technique in DSA used to find occurrences of a specific pattern within a larger text. The Pattern Searching Algorithms use techniques like¬†preprocessing¬†to minimize unnecessary comparisons, making the search faster.\n\n\n\nNaive String Matching : A Simple Algorithm that works in O(m x n) time where m is the length of the pattern and n is the length of the text.\nKnuth-Morris-Pratt (KMP) Algorithm It preprocesses pattern and works in O(m + n) Time.\nRabin-Karp Algorithm : It uses hashing to compare the pattern with the text. It works in O(m x n) Time in worst case,\nAho-Corasick Algorithm : A deterministic finite automaton (DFA) based algorithm and works in O(m + n) time.\n\n\n\n\n\nIntroduction to Pattern Searching\nNaive Pattern Searching\n\n\n\n\n\nRabin-Karp Algorithm\nKMP Algorithm\nZ algorithm\nFinite Automata\nBoyer Moore ‚Äì Bad Character Heuristic\nAho-Corasick Algorithm\nSuffix Array\nKasai‚Äôs Algorithm for LCP array from Suffix Array\nOnline algorithm for checking palindrome in a stream\nManacher‚Äôs Algorithm\nUkkonen‚Äôs Suffix Tree Construction ‚Äì Part 1\nGeneralized Suffix Tree\n\n\n\n\n\nFrequency of a Substring\nAnagram Substring Search\nCheck if Two Strings Rotations\nSubstrings with all Vowels\nSubstrings with only Given Character\nFind all Occurrences of a Subarray\nPattern Searching using a Trie of all Suffixes\nWildcard Pattern Matching\nRegular Expression Matching\nLongest prefix which is also suffix\nCount string in a 2D array\nFind all the patterns of ‚Äú1(0+)1‚Äù\nMax length prefix as Subsequence\nSearch a Word in a 2D Grid\nWord Search with Zig-Zag\nSuffix Tree Application 1 ‚Äì Substring Check\n\n\n\n\nPattern searching algorithms have numerous applications, including:\n\nText Processing: Searching for keywords in a document, finding and replacing text, spell checking, and plagiarism detection.\nInformation Retrieval: Finding relevant documents in a database, web search, and data mining.\nBioinformatics: Searching for DNA sequences in a genome, protein analysis, and gene expression analysis.\nNetwork Security: Detecting malicious patterns in network traffic, intrusion detection, and malware analysis.\nData Mining: Identifying patterns in large datasets, customer segmentation, and fraud detection."
  },
  {
    "objectID": "coding.html#branch-and-bound-algorithm",
    "href": "coding.html#branch-and-bound-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Branch and Bound Algorithm is a method used in combinatorial optimization problems to systematically search for the best solution. It works by dividing the problem into smaller subproblems, or branches, and then eliminating certain branches based on bounds on the optimal solution. This process continues until the best solution is found or all branches have been explored.\n\n\n\nBranch and Bound meaning in DSA\nIntroduction to Branch and Bound\nDifference between Backtracking and Branch-N-Bound\n\n\n\n\n\nBranch and Bound | Set 1 (Introduction with 0/1 Knapsack)\nBranch and Bound | Set 2 (Implementation of 0/1 Knapsack)\n0/1 Knapsack using Least Cost Branch and Bound\nBranch and Bound | Set 3 (8 puzzle Problem)\nBranch and Bound | Set 5 (N Queen Problem)\nBranch And Bound | Set 6 (Traveling Salesman Problem)\nJob Assignment Problem using Branch And Bound\nTravelling Salesman Problem (TSP) using Reduced Matrix Method\nGenerate Binary Strings of length N using Branch and Bound"
  },
  {
    "objectID": "coding.html#geometric-algorithms",
    "href": "coding.html#geometric-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Geometric algorithms are a set of algorithms that solve problems related to¬†shapes,¬†points,¬†lines and polygons. Geometric algorithms are essential for solving a wide range of problems in computer science, such as intersection detection, convex hull computation, etc.\n\n\n\nWhat are Geometric Algorithms?\nPattern Printing\nLines\nTriangle\nRectangle | Square | Circle\nQuadrilateral\n3D Objects\nPolygon and Convex Hull\nStandard Problems on Geometric Algorithm\n\n\n\n\n\nPrint lower triangle with alternate ‚Äò*‚Äô and ‚Äò#‚Äô\nPrint the pattern 1*2*5*6 ‚Äì3*4\nPython Program to print the pattern ‚ÄòG‚Äô\nPascal‚Äôs Triangle\nProgram to print pyramid pattern\nProgram to print the diamond shape\nHour-glass Pattern\nProgram to print V and inverted-V pattern\nProgram to print hollow pyramid, diamond pattern and their modifications\nCode to Generate the Map of India (With Explanation)\n\n\n\n\n\nProgram to find the mid-point of a line\nSection formula (Point that divides a line in given ratio)\nProgram to find slope of a line\nProgram to find line passing through 2 Points\nProgram for Point of Intersection of Two Lines\nReflection of a point about a line in C++\nFind points at a given distance on a line of given slope\nGiven n line segments, find if any two segments intersect\nCount maximum points on same line\nMinimum lines to cover all points\n\n\n\n\n\nCheck whether triangle is valid or not if sides are given\nCheck whether a given point lies inside a triangle or not\nProgram to find area of a triangle\nCheck if right triangle possible from given area and hypotenuse\nCount Integral points inside a Triangle\nFind all angles of a given triangle\nProgram to find Circumcenter of a Triangle\nNumber of Triangles that can be formed given a set of lines in Euclidean Plane\nProgram to calculate area of Circumcircle of an Equilateral Triangle\nProgram to find third side of triangle using law of cosines\n\n\n\n\n\nCheck whether a given point lies inside a rectangle or not\nProgram for Area And Perimeter Of Rectangle\nFind if two rectangles overlap\nHow to check if given four points form a square\nNumber of rectangles in N*M grid\nProgram to find Circumference of a Circle\nProgram to find area of a circle\nCheck whether a point exists in circle sector or not\nCheck if two given circles touch or intersect each other\nProgram to find area of a Circular Segment\nCheck if a line touches or intersects a circle\nArea of a Circumscribed Circle of a Square\nFind minimum radius such that atleast k point lie inside the circle\nAngular Sweep (Maximum points that can be enclosed in a circle of given radius)\n\n\n\n\n\nNumber of parallelograms when n horizontal parallel lines intersect m vertical parallellines\nProgram for Circumference of a Parallelogram\nProgram to calculate area and perimeter of Trapezium\nProgram to find area of a Trapezoid\nFind all possible coordinates of parallelogram\nMaximum area of quadrilateral\nCheck whether four points make a parallelogram\nFind the Missing Point of Parallelogram\n\n\n\n\n\nFind the perimeter of a cylinder\nProgram for Volume and Surface area of Frustum of Cone\nProgram to calculate volume of Ellipsoid\nProgram for volume of Pyramid\nCalculate volume and surface area of a cone\nCalculate Volume and Surface area Of Sphere\nProgram for Volume and Surface Area of Cuboid\nProgram for Volume and Surface Area of Cube\nPythagorean Quadruple\nLS3/NS3 sphere generation algorithm and its implementation\n\n\n\n\n\nHow to check if a given point lies inside or outside a polygon?\nArea of a polygon with given n ordered vertices\nTangents between two Convex Polygons\nFind number of diagonals in n sided convex polygon\nConvex Hull using Jarvis‚Äô Algorithm or Wrapping\nQuickhull Algorithm for Convex Hull\nDeleting points from Convex Hull\nMinimum area of a Polygon with three points given\n\n\n\n\n\nFinding the vertex, focus\nand directrix of a parabola\nFind Simple Closed Path for a given set of points\nNumber of Integral Points between Two Points\nOptimum location of point to minimize total distance\nFind perimeter of shapes formed with 1s in binary matrix\nDraw geometric shapes on images using OpenCV\nFind if it‚Äôs possible to rotate the page by an angle or not\nEquable Shapes"
  },
  {
    "objectID": "coding.html#randomized-algorithms",
    "href": "coding.html#randomized-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Randomized algorithms are algorithms that use¬†randomness to solve problems. They make use of random input to achieve their goals, often leading to¬†simpler and more¬†efficient solutions. These algorithms may¬†not product same result but are particularly useful in situations when a¬†probabilistic approach¬†is acceptable.\n\n\n\nIntroduction and Analysis\nClassification and Applications\n1/2 Approximate Median Example\n\n\n\n\n\nGenerates one of 3 according to given probabilities\nGenerate 0 and 1 with 25% and 75% probability\nImplement rand3() using rand2()\nBirthday Paradox\nExpected Value of an array\nShuffle a deck of cards\nGenerate CAPTCHA and verify\nIndex of max occurring with equal probability\nRandomized Binary Search\n\n\n\n\n\nMake a fair coin from a biased coin\nShuffle a given array using Fisher‚ÄìYates shuffle Algorithm\nExpected Number of Trials until Success\nStrong Password Suggester Program\nQuickSort using Random Pivoting\nOperations on Sparse Matrices\nEstimating the value of Pi using Monte Carlo\nImplement rand12() using rand6() in one line\n\n\n\n\n\nGenerate integer from 1 to 7 with equal probability\nImplement random-0-6-Generator using the given random-0-1-Generator\nSelect a random number from stream, with O(1) space\nRandom number generator in arbitrary probability distribution fashion\nReservoir Sampling\nLinearity of Expectation\nIntroduction and implementation of Karger‚Äôs algorithm for Minimum Cut\nSelect a Random Node from a Singly Linked List\nSelect a Random Node from a tree with equal probability\nFreivald‚Äôs Algorithm to check if a matrix is product of two\nRandom Acyclic Maze Generator with given Entry and Exit point"
  },
  {
    "objectID": "coding.html#basics-on-analysis-of-algorithms",
    "href": "coding.html#basics-on-analysis-of-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Why is Analysis Important?\nOrder of Growth\nAsymptotic Analysis\nWorst, Average and Best Cases of Algorithms"
  },
  {
    "objectID": "coding.html#asymptotic-notations",
    "href": "coding.html#asymptotic-notations",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Big-O Notation\nTheta - Œò Notation\nBig ‚Äì ‚Ñ¶ (Big- Omega) Notation\nTime Complexity\nSpace Complexity\nDifference between Big Oh, Big Omega and Big Theta\nExamples of Big-O analysis\nDifference between big O notations and tilde\nPractice Questions on Time Complexity Analysis"
  },
  {
    "objectID": "coding.html#analysis-examples",
    "href": "coding.html#analysis-examples",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Analyzing Loops\nAnalyzing Recursive Functions\nAmortized Analysis"
  },
  {
    "objectID": "coding.html#basics",
    "href": "coding.html#basics",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to Bitwise Algorithms\nBitwise Operators in C/C++\nBitwise Operators in Java\nPython Bitwise Operators\nJavaScript Bitwise Operators\nAll about Bit Manipulation\nLittle and Big Endian Mystery"
  },
  {
    "objectID": "coding.html#bit-manipulation-tips-and-tricks",
    "href": "coding.html#bit-manipulation-tips-and-tricks",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Bits manipulation (Important tactics)\nBitwise Hacks for Competitive Programming"
  },
  {
    "objectID": "coding.html#easy-problems-on-bit-algorithms",
    "href": "coding.html#easy-problems-on-bit-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Binary Representation\nTurn off the rightmost set bit\nCheck if K-th Bit Set\nSet the K-th Bit\nModulus division by 2‚Äôs Power\nOdd Occurring Number\nPower of two\nThe only set bit\nAdd Bit Strings\nCheck for Integer Overflow\nXOR without using XOR\nCheck for Equal\nCheck for opposite signs\nSwap Two Numbers\nRussian Peasant"
  },
  {
    "objectID": "coding.html#medium-problems-on-bit-algorithms",
    "href": "coding.html#medium-problems-on-bit-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Most Significant Set Bit\nRightmost Set Bit\nCount Set Bits\nSwap Bits\nRotate Bits\nSmallest of Three\nMinimum without branching\nSmallest power of 2 greater than or equal to n\nProgram to find parity\nCheck if binary is palindrome\nGenerate n-bit Gray Codes\nCheck for Sparse\nEuclid when % and / are costly\nSquare without using *, / and pow()\nCyclic Redundancy Check and Modulo-2 Division\nSet Bits in a Range\nCheck for Bleak\nGray to Binary and Vice Versa"
  },
  {
    "objectID": "coding.html#hard-problems-on-bit-algorithms",
    "href": "coding.html#hard-problems-on-bit-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Next higher with same set bits\nKaratsuba Algorithm for fast Multiplication\nMax Subarray XOR\nLongest Sequence of 1‚Äôs in Binary with One Flip\nClosest Smaller and greater with same set bits\nBitmasking and Dynamic Programming\nCompute the Parity\nXOR Encryption by Shifting Plaintext\nCount pairs with at least one digit common\nFloating to Binary\nBooth‚Äôs Multiplication Algorithm\nPairs with Pandigital Concatenation\nn-th number whose binary is a palindrome\nTwo non-repeating in an array of repeating"
  },
  {
    "objectID": "coding.html#what-are-bitwise-algorithms",
    "href": "coding.html#what-are-bitwise-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Bitwise algorithms are algorithms that operate on individual bits of data rather than on larger data types like integers or floating-point numbers. These algorithms manipulate bits directly, typically using bitwise operators such as AND, OR, XOR, shift left, shift right, and complement."
  },
  {
    "objectID": "coding.html#common-bitwise-algorithms-and-operations",
    "href": "coding.html#common-bitwise-algorithms-and-operations",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Here are some common bitwise algorithms and operations:\n\nBitwise AND (&): Takes two numbers as input and performs a bitwise AND operation on their corresponding bits. It returns 1 only if both bits are 1; otherwise, it returns 0.\nBitwise OR (|): Performs a bitwise OR operation on the corresponding bits of two numbers. It returns 1 if at least one of the bits is 1.\nBitwise XOR (^): Performs a bitwise exclusive OR operation on the corresponding bits of two numbers. It returns 1 if the bits are different and 0 if they are the same.\nBitwise NOT (~): Performs a bitwise NOT operation, which flips each bit of the input (1 becomes 0 and 0 becomes 1).\nLeft Shift (&lt;&lt;) and Right Shift (&gt;&gt;): These operators shift the bits of a number to the left or right by a specified number of positions. Left shifting is equivalent to multiplying the number by 2, while right shifting is equivalent to dividing by 2."
  },
  {
    "objectID": "coding.html#applications-of-bitwise-algorithms",
    "href": "coding.html#applications-of-bitwise-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Bit manipulation (setting, clearing, toggling bits): Bitwise operators are often used to manipulate individual bits of numbers. This includes tasks such as setting bits (using OR), clearing bits (using AND with the complement), toggling bits (using XOR with 1), and checking the value of a specific bit.\nEfficient storage of data: Bitwise algorithms play a crucial role in data compression techniques like Huffman coding. They can efficiently represent and process compressed data by manipulating bits directly.\nCryptography: Many cryptographic algorithms, such as AES (Advanced Encryption Standard), DES (Data Encryption Standard), and SHA (Secure Hash Algorithm), utilize bitwise operations for encryption, decryption, and hashing. Bitwise XOR, in particular, is commonly used in encryption algorithms for its simplicity and effectiveness.\nNetworking and Protocol Handling: Bitwise algorithms are used in networking protocols for tasks like IP address manipulation, subnet masking, and packet parsing. For example, bitwise AND is used in subnet masking to determine the network address from an IP address and subnet mask.\nLow-Level System Programming: Bitwise operations are essential in low-level system programming for tasks such as device control, memory management, and bit-level I/O operations. They are used to manipulate hardware registers, set/clear flags, and optimize code for performance.\nError Detection and Correction: Bitwise algorithms are employed in error detection and correction techniques, such as CRC (Cyclic Redundancy Check) and Hamming codes. These algorithms use bitwise XOR and other operations to detect and correct errors in transmitted data."
  },
  {
    "objectID": "coding.html#basics-1",
    "href": "coding.html#basics-1",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Linear Search\nBinary Search\nTwo Pointers Technique"
  },
  {
    "objectID": "coding.html#library-implementations-of-binary-search",
    "href": "coding.html#library-implementations-of-binary-search",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "binary_search, lower_bound and upper_bound in C++\nArrays.binarySearch() in Java\nArrays.binarySearch() in Java for Search in subarray\nCollections.binarySearch() in Java\nBisect in Python\nList.BinarySearch in C#"
  },
  {
    "objectID": "coding.html#easy-problems-1",
    "href": "coding.html#easy-problems-1",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Largest in an Array\nSecond Largest in an array\nLargest three in an array\nMissing Number\nFirst Repeating\nMissing and Repeating\nCount 1‚Äôs in a sorted binary array\nClosest to 0 Sum Pair\nPair with the given difference\nk largest(or smallest) Elements\nKth smallest in row and column-wise sorted\nCommon elements in 3 sorted\nCeiling in a sorted\nFloor in a Sorted\nMaximum in a Bitonic\nElements that appear more than n/k times"
  },
  {
    "objectID": "coding.html#medium-problems-1",
    "href": "coding.html#medium-problems-1",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Triplets with zero sum\nPartition Point\nLargest pair sum\nK‚Äôth Smallest in Unsorted Array\nSearch an in a sorted and rotated\nMin in a sorted and rotated\nMax in a sorted and rotated\nPeak element\nMax and min using minimum comparisons\nFind a Fixed Point in a given array\nK most frequent words from a file\nK closest elements\n2 Sum ‚Äì Pair Sum Closest to Target in Sorted Array\nClosest pair from two sorted arrays\nThree closest from three sorted arrays\nBinary Search for Rationals\nMissing Element in AP"
  },
  {
    "objectID": "coding.html#hard-problems-1",
    "href": "coding.html#hard-problems-1",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Median of two sorted arrays\nMedian of two sorted of different sizes\nSearch in an almost sorted array\nSearch in a sorted infinite array\nPair sum in a sorted and rotated array\nK‚Äôth Smallest/Largest Element in Unsorted Array\nK‚Äôth largest element in a stream\nBest First Search (Informed Search)"
  },
  {
    "objectID": "coding.html#more-searching-algorithms",
    "href": "coding.html#more-searching-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Sentinel Linear Search\nMeta Binary Search | One-Sided Binary Search\nTernary Search\nJump Search\nInterpolation Search\nExponential Search\nFibonacci Search\nThe Ubiquitous Binary Search"
  },
  {
    "objectID": "coding.html#comparisons-between-different-searching-algorithms",
    "href": "coding.html#comparisons-between-different-searching-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Linear Search vs Binary Search\nInterpolation search vs Binary search\nWhy is Binary Search preferred over Ternary Search?\nIs Sentinel Linear Search better than normal Linear Search?"
  },
  {
    "objectID": "coding.html#basics-of-sorting-algorithms",
    "href": "coding.html#basics-of-sorting-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to Sorting\nApplications of Sorting"
  },
  {
    "objectID": "coding.html#sorting-algorithms-1",
    "href": "coding.html#sorting-algorithms-1",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Comparison Based : Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Quick Sort, Heap Sort, Cycle Sort, 3-way Merge Sort\nNon Comparison Based : Counting Sort, Radix Sort, Bucket Sort, TimSort, Comb Sort, Pigeonhole Sort\nHybrid Sorting Algorithms : IntroSort, Tim Sort"
  },
  {
    "objectID": "coding.html#library-implementations",
    "href": "coding.html#library-implementations",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "qsort() in C\nsort() in C++ STL\nArrays.sort() in Java with examples\nCollections.sort() in Java with Examples\nSort a List in Python\nSorting in JavaScript"
  },
  {
    "objectID": "coding.html#easy-problems-on-sorting",
    "href": "coding.html#easy-problems-on-sorting",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Check if an array is Sorted\nSort an array of two types\nSort a String\nSort Each Row of a Matrix\nSort a Matrix\nSort a Linked List\nSort in Wave Form\nSort by Frequency\nSort from Different Machines\nCheck if any two intervals overlap\nMissing elements of a range\nSort by set bits counts\nSort even and odd placed in different orders\nSorting Big Integers\nSort strings by lengths\nMerge Two Sorted Arrays\nSort when two halves are sorted\n2 Sum - Pair in a Sorted Array\nIntersection of two sorted arrays\nUnion of two sorted arrays\nMeeting Rooms"
  },
  {
    "objectID": "coding.html#medium-problems-on-sorting",
    "href": "coding.html#medium-problems-on-sorting",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Minimum Increments to Make Unique\nMerge Overlapping Intervals\nMinimum Platforms\nClosest Pair of Elements\nClosest Pair of Points\nChocolate Distribution Problem\nMin and Max Amount to Buy All\nThree Way Partitioning\nSort an array of 0s, 1s and 2s\nSort a linked list of 0s, 1s and 2s\nInversion count\nK-th Smallest Element\nK Smallest Elements\n3 Sum - Find Any\n3 Sum - Closest Triplet\nSmallest Difference Triplet from Three arrays\nMerge K Sorted Arrays\nMerge K Sorted Linked Lists\nMin Unsorted Subarray to make array sorted\nSort a nearly sorted array\nSort n numbers in range from 0 to n^2 ‚Äì 1\nSort an array of 1 to n\nSort according to order defined by another\nMaximum intervals overlap\nPermutation with worst Case of Merge Sort\nMinimum swaps to make two arrays identical\nPermute two arrays such that all pair suns are greater than K\nBucket Sort To Sort an Array with Negative Numbers\nConvert an Array to reduced form using Vector of pairs\nCheck if array can be sorted with conditional swapping of adjacent\n4 Sum - Find Any [More problems an 4 Sum are in Hard Section]"
  },
  {
    "objectID": "coding.html#hard-problems-on-sorting",
    "href": "coding.html#hard-problems-on-sorting",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Merge Without Extra Space\nTop K Frequent Elements\n3 Sum - Distinct Triplets\n4 Sum - Distinct Quadruples\n4 Sum - All Quadruples\n4 Sum - Closest Quadruple\nSurpasser Counts in an Array\nCount distinct occurrences as a subsequence\nMinimum consecutive number subsets\nMinimum swaps for Binary Tree to BST\nK-th smallest element after removing some integers from natural numbers\nMax frequency diff such greater freq item is also is also greater\nMin swaps to reach permuted array with at most 2 positions left swaps allowed\nMaking Array Elements Same\nSort an array after applying an equation\nArray of strings in sorted order without copying strings"
  },
  {
    "objectID": "coding.html#learn-basics-of-recursion-algorithms",
    "href": "coding.html#learn-basics-of-recursion-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to Recursion\nRecursion vs Iteration\nFinite and Infinite Recursion\nWhat is Tail Recursion\nTail Recursion Optimization"
  },
  {
    "objectID": "coding.html#recursion-in-different-languages",
    "href": "coding.html#recursion-in-different-languages",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Recursion in Python\nRecursion in Java\nRecursion in C#\nRecursion in JavaScript"
  },
  {
    "objectID": "coding.html#easy-problems-on-recursion",
    "href": "coding.html#easy-problems-on-recursion",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Print 1 to n without loop\nPrint n to 1 without loop\nMean of Array using Recursion\nSum of natural numbers using recursion\nDecimal to binary number using recursion\nSum of array elements using recursion\nPrint reverse of a string using recursion\nProgram for length of a string using recursion\nSum of digit of a number using recursion\nTail recursion to calculate sum of array elements.\nProgram to print first n Fibonacci Numbers | Set 1\nFactorial of a number\nArray Min and Max using Recursion\nPalindrome Check using Recursion\nCount Set-bits using Recursion\nFibonacci Series in reverse order using Recursion"
  },
  {
    "objectID": "coding.html#medium-problems-on-recursion",
    "href": "coding.html#medium-problems-on-recursion",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Recursively remove all adjacent duplicates\nSort the Queue using Recursion\nReversing a queue using recursion\nCoin Change\nBinary to Gray code using recursion\nDelete a linked list using recursion\nProduct of 2 Numbers using Recursion\nPrograms for Printing Pyramid Patterns using Recursion\nLength of longest palindromic sub-string : Recursion\nProgram for Tower of Hanoi Algorithm\nTime Complexity Analysis | Tower Of Hanoi (Recursion)\nProgram to calculate value of nCr using Recursion\nFind geometric sum of the series using recursion\nConvert a String to an Integer using Recursion\nDFS traversal of a Tree\nBottom View of a Binary Tree using Recursion\nWrite a program to print all Permutations of given String\nPrint all subsets of a given Set or Array\nPrint all possible paths from top left to bottom right of a mXn matrix\nPrint all combinations of balanced parentheses\nLongest Common Subsequence (LCS)"
  },
  {
    "objectID": "coding.html#hard-problems-on-recursion",
    "href": "coding.html#hard-problems-on-recursion",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Find the value of a number raised to its reverse\nHow to Sort a Stack using Recursion\nReverse a Doubly linked list using recursion\nGiven a string, print all possible palindromic partitions\nCheck if a string is a scrambled form of another string\nWord Break Problem | DP-32\nPrint all palindromic partitions of a string\nN Queen Problem | Backtracking-3\nAlgorithm to Solve Sudoku | Sudoku Solver\nThe Knight‚Äôs tour problem"
  },
  {
    "objectID": "coding.html#what-is-a-recursive-algorithm",
    "href": "coding.html#what-is-a-recursive-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "A recursive algorithm is an algorithm that uses recursion to solve a problem. Recursive algorithms typically have two parts:\n\nBase case: Which is a condition that stops the recursion.\nRecursive case: Which is a call to the function itself with a smaller version of the problem."
  },
  {
    "objectID": "coding.html#types-of-recursion",
    "href": "coding.html#types-of-recursion",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "There are several different recursion types and terms. These include:\n\nDirect recursion: This is typified by the factorial implementation where the methods call itself.\nIn-Direct recursion: This happens where one method, say method A, calls another method B, which then calls method A. This involves two or more methods that eventually create a circular call sequence.\nHead recursion: The recursive call is made at the beginning of the method.\nTail recursion: The recursive call is the last statement."
  },
  {
    "objectID": "coding.html#applications-of-recursion-algorithms",
    "href": "coding.html#applications-of-recursion-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Here are some common applications of recursion:\n\nTree and Graph Traversal: Depth-first search (DFS) and breadth-first search (BFS)\nDynamic Programming: Solving optimization problems by breaking them into smaller subproblems\nDivide-and-Conquer: Solving problems by dividing them into smaller parts, solving each part recursively, and combining the results\nBacktracking: Exploring all possible solutions to a problem by recursively trying different options\nCombinatorics: Counting or generating all possible combinations or permutations of a set"
  },
  {
    "objectID": "coding.html#when-to-use-recursion",
    "href": "coding.html#when-to-use-recursion",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Recursion is a powerful technique that can be used to solve a wide variety of problems. However, it is important to use recursion carefully, as it can lead to stack overflows if not used properly.\nRecursion should be used when:\n\nThe problem can be broken down into smaller subproblems that can be solved recursively.\nThe base case is easy to identify.\nThe recursive calls are tail recursive."
  },
  {
    "objectID": "coding.html#basic-of-backtracking-algorithm",
    "href": "coding.html#basic-of-backtracking-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to Backtracking\nBacktracking vs Recursion\nBacktracking vs Branch and Bound"
  },
  {
    "objectID": "coding.html#standard-problems",
    "href": "coding.html#standard-problems",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Permutations of a String\nThe Knight‚Äôs tour problem\nRat in a Maze\nN Queen Problem | Backtracking-3\nSubset Sum problem\nm Coloring Problem\nHamiltonian Cycle\nSudoku | Backtracking-7\nMagnet Puzzle\nRemove Invalid Parentheses\nA backtracking approach to generate n bit Gray Codes"
  },
  {
    "objectID": "coding.html#easy-problem",
    "href": "coding.html#easy-problem",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Backtracking to find all subsets\nCheck if a given string is sum-string\nCount all possible paths between two vertices\nFind all distinct subsets of a given set\nFind if there is a path of more than k length from a source\nPrint all paths from a given source to a destination\nPrint all possible strings that can be made by placing spaces"
  },
  {
    "objectID": "coding.html#medium-problems-2",
    "href": "coding.html#medium-problems-2",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Tug of War\n8 queen problem\nCombinational Sum\nWarnsdorff‚Äôs algorithm for Knight‚Äôs tour problem\nFind paths from corner cell to middle cell in maze\nFind Maximum number possible by doing at-most K swaps\nRat in a Maze with multiple steps or jump allowed\nN Queen in O(n) space"
  },
  {
    "objectID": "coding.html#hard-problems-2",
    "href": "coding.html#hard-problems-2",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Power Set in Lexicographic order\nWord Break Problem using Backtracking\nPartition of a set into K subsets with equal sum\nLongest Possible Route in a Matrix with Hurdles\nFind shortest safe route in a path with landmines\nPrint all palindromic partitions of a string\nPrinting all solutions in N-Queen Problem\nPrint all longest common sub-sequences in lexicographical order"
  },
  {
    "objectID": "coding.html#what-is-backtracking-algorithm",
    "href": "coding.html#what-is-backtracking-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Backtracking is a problem-solving algorithmic technique that involves finding a solution incrementally by trying¬†different options¬†and¬†undoing¬†them if they lead to a¬†dead end.\nIt is commonly used in situations where you need to explore multiple possibilities to solve a problem, like searching for a path in a maze or solving puzzles like Sudoku. When a dead end is reached, the algorithm backtracks to the previous decision point and explores a different path until a solution is found or all possibilities have been exhausted."
  },
  {
    "objectID": "coding.html#how-does-a-backtracking-algorithm-work",
    "href": "coding.html#how-does-a-backtracking-algorithm-work",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "A backtracking algorithm works by recursively exploring all possible solutions to a problem. It starts by choosing an initial solution, and then it explores all possible extensions of that solution. If an extension leads to a solution, the algorithm returns that solution. If an extension does not lead to a solution, the algorithm backtracks to the previous solution and tries a different extension.\nThe following is a general outline of how a backtracking algorithm works:\n\nChoose an initial solution.\nExplore all possible extensions of the current solution.\nIf an extension leads to a solution, return that solution.\nIf an extension does not lead to a solution, backtrack to the previous solution and try a different extension.\nRepeat steps 2-4 until all possible solutions have been explored."
  },
  {
    "objectID": "coding.html#example-of-backtracking-algorithm",
    "href": "coding.html#example-of-backtracking-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Example: Finding the shortest path through a maze\nInput: A maze represented as a 2D array, where 0 represents an open space and 1 represents a wall.\nAlgorithm:\n\nStart at the starting point.\nFor each of the four possible directions (up, down, left, right), try moving in that direction.\nIf moving in that direction leads to the ending point, return the path taken.\nIf moving in that direction does not lead to the ending point, backtrack to the previous position and try a different direction.\nRepeat steps 2-4 until the ending point is reached or all possible paths have been explored."
  },
  {
    "objectID": "coding.html#when-to-use-a-backtracking-algorithm",
    "href": "coding.html#when-to-use-a-backtracking-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Backtracking algorithms are best used to solve problems that have the following characteristics:\n\nThere are multiple possible solutions to the problem.\nThe problem can be broken down into smaller subproblems.\nThe subproblems can be solved independently."
  },
  {
    "objectID": "coding.html#applications-of-backtracking-algorithm",
    "href": "coding.html#applications-of-backtracking-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Backtracking algorithms are used in a wide variety of applications, including:\n\nSolving puzzles (e.g., Sudoku, crossword puzzles)\nFinding the shortest path through a maze\nScheduling problems\nResource allocation problems\nNetwork optimization problems\nCombinatorial problems, such as generating permutations, combinations, or subsets."
  },
  {
    "objectID": "coding.html#basics-of-greedy-algorithm",
    "href": "coding.html#basics-of-greedy-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to Greedy Algorithm\nGreedy Algorithms General Structure"
  },
  {
    "objectID": "coding.html#easy-problems-on-greedy-algorithm",
    "href": "coding.html#easy-problems-on-greedy-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Fractional Knapsack\nMin Cost to Make Array Size 1\nMin Rotations for Circular Lock\nMax Composite Numbers to Make n\nSmallest Subset Greater Sum\nAssign Cookies\nBuy Maximum Stocks\nMax Consecutive Diff Sum\nMin and Max Costs to buy all\nMin Notes with Given Sum\nMax Equal Sum of Three Stacks"
  },
  {
    "objectID": "coding.html#medium-problems-on-greedy-algorithm",
    "href": "coding.html#medium-problems-on-greedy-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Activity Selection Problem\nJump Game\nJob Sequencing Problem\nEgyptian Fraction\nMerge Overlapping Intervals\nMin Fibonacci Terms with Sum K\nMinimum Platforms\nMin Cost to Connect n ropes\nMax trains\nPartition 1 to n into two min diff groups\nPaper cut into min squares\nMin diff groups of size two\nMax Satisfied Customers\nMin initial vertices to traverse matrix with constraints\nLargest palindromic number by permuting digits\nSmallest with n digits and digits sum\nLexicographically largest subsequence with every char at least k times"
  },
  {
    "objectID": "coding.html#hard-problems-on-greedy-algorithm",
    "href": "coding.html#hard-problems-on-greedy-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Minimize the Max Height Diff\nMaking max equal with k updates\nMinimize cash flow among friends\nMinimum Cost to cut a board into squares\nMinimum cost to process m tasks where switching costs\nMinimum time to finish all jobs with given constraints\nMinimize the maximum difference between the heights of towers\nMinimum edges to reverse to make path from a source to a destination\nFind the Largest Cube formed by Deleting minimum Digits from a number\nRearrange characters in a string such that no two adjacent are same\nRearrange a string so that all same characters become d distance away"
  },
  {
    "objectID": "coding.html#standard-greedy-algorithms",
    "href": "coding.html#standard-greedy-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Activity Selection Problem\nJob Sequencing Problem\nHuffman Coding\nHuffman Decoding\nWater Connection Problem\nMinimum Swaps for Bracket Balancing\nEgyptian Fraction\nPolicemen catch thieves\nFitting Shelves Problem\nAssign Mice to Holes"
  },
  {
    "objectID": "coding.html#greedy-problems-on-array",
    "href": "coding.html#greedy-problems-on-array",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Minimum product subset of an array\nMaximize array sum after K negations using Sorting\nMinimum sum of product of two arrays\nMinimum sum of absolute difference of pairs of two arrays\nMinimum increment/decrement to make array non-Increasing\nSorting array with reverse around middle\nSum of Areas of Rectangles possible for an array\nLargest lexicographic array with at-most K consecutive swaps\nPartition into two subarrays of lengths k and (N ‚Äì k) such that the difference of sums is maximum"
  },
  {
    "objectID": "coding.html#greedy-problems-in-operating-system",
    "href": "coding.html#greedy-problems-in-operating-system",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "First Fit algorithm in Memory Management\nBest Fit algorithm in Memory Management\nWorst Fit algorithm in Memory Management\nShortest Job First Scheduling\nJob Scheduling with two jobs allowed at a time\nProgram for Optimal Page Replacement Algorithm"
  },
  {
    "objectID": "coding.html#greedy-problems-on-graph",
    "href": "coding.html#greedy-problems-on-graph",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Kruskal‚Äôs Minimum Spanning Tree\nPrim‚Äôs Minimum Spanning Tree\nBoruvka‚Äôs Minimum Spanning Tree\nDijkastra‚Äôs Shortest Path Algorithm\nDial‚Äôs Algorithm\nMinimum cost to connect all cities\nMax Flow Problem Introduction\nNumber of single cycle components in an undirected graph"
  },
  {
    "objectID": "coding.html#approximate-greedy-algorithm-for-np-complete",
    "href": "coding.html#approximate-greedy-algorithm-for-np-complete",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Set cover problem\nBin Packing Problem\nGraph Coloring\nK-centers problem\nShortest superstring problem\nApproximate solution for Travelling Salesman Problem using MST"
  },
  {
    "objectID": "coding.html#greedy-for-special-cases-of-dp",
    "href": "coding.html#greedy-for-special-cases-of-dp",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Fractional Knapsack Problem\nMinimum number of coins required"
  },
  {
    "objectID": "coding.html#basic-of-dp",
    "href": "coding.html#basic-of-dp",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to DP\nTabulation vs Memoizatation\nSteps to solve a DP Problem"
  },
  {
    "objectID": "coding.html#basic-problems-1",
    "href": "coding.html#basic-problems-1",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Fibonacci numbers\nTribonacci Numbers\nLucas Numbers\nClimbing Stairs\nClimbing Stairs with 3 Moves\nWeighted Climbing Stairs\nMaximum Segments\nnth Catalan Number\nCount Unique BSTs\nCount Valid Parenthesis\nWays to Triangulate a Polygon\nMin Sum in a Triangle\nMinimum Perfect Squares\nWays to Partition a Set\nBinomial Coefficient\nPascal‚Äôs Triangle\nNth Row of Pascal Triangle\nMin Sum in a Triangle"
  },
  {
    "objectID": "coding.html#easy-problems-2",
    "href": "coding.html#easy-problems-2",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "House Robber\nMin Cost Path\nDecode Ways\nSubset Sum Problem\nCoin change problem - Count Ways\nCoin Change ‚Äì Minimum Coins to Make Sum\nPainting Fence Algorithm\nCutting a Rod\nJump Game\nLongest Common Substring\nCount all paths in a Grid\nPaths in a Grid with Obstacles\nPermutations with K Inversions\nMax A‚Äôs using Special Keyboard"
  },
  {
    "objectID": "coding.html#medium-problems-3",
    "href": "coding.html#medium-problems-3",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Water Overflow\nLongest Common Subsequence\nLongest Increasing Subsequence\nEdit Distance\nLargest Divisible Subset\nWeighted Job Schedulling\n0-1 Knapsack Problem\nPrinting Items in 0/1 Knapsack\nUnbounded Knapsack\nWord Break Problem\nTile Stacking Problem\nBox-Stacking Problem\nPartition Problem\nLongest Palindromic Subsequence\nLongest Common Increasing Subsequence (LCS + LIS)\nAll distinct subset (or subsequence) sums\nCount Derangements\nMinimum insertions for palindrome\nWildcard Pattern Matching\nRegular Expression Matching\nArrange Balls with adjacent of different types\nLongest Subsequence with 1 adjacent difference\nMaximum size square sub-matrix with all 1s\nBellman‚ÄìFord Algorithm\nFloyd Warshall Algorithm\nMaximum Tip Calculator"
  },
  {
    "objectID": "coding.html#hard-problems-3",
    "href": "coding.html#hard-problems-3",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Largest X Bordered Square\nEgg Dropping Problem\nPalindrome Partitioning\nPalindromic Substring Count\nWord Wrap Problem\nOptimal Strategy for a Game\nThe painter‚Äôs partition problem\nProgram for Bridge and Torch problem\nMatrix Chain Multiplication\nPrinting Matrix Chain Multiplication\nMaximum sum rectangle\nStock Buy and Sell - At-Most k Times\nStock Buy and Sell - At Most 2 Times\nMin cost to sort strings using Reversals\nCount of AP Subsequences\nDP on Trees\nMax Height of Tree when any Node can be Root\nLongest repeating and non-overlapping substring\nPalindrome Substrings Count"
  },
  {
    "objectID": "coding.html#basics-2",
    "href": "coding.html#basics-2",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Graph and its representations"
  },
  {
    "objectID": "coding.html#bfs-and-dfs",
    "href": "coding.html#bfs-and-dfs",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Breadth First Traversal\nDepth First Traversal\nDifference between BFS and DFS\nRotten Tomatoes\nIslands in a Graph\nFlood Fill\nCheck for Bipartite\nWord Ladder\nSnakes and Ladder\nWater Jug problem\nPacific Atlantic Water Flow\nShortest Path in Binary Matrix\nClone a Graph\nTransitive Closure of a Graph using DFS"
  },
  {
    "objectID": "coding.html#cycles",
    "href": "coding.html#cycles",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Detect Cycle in a Directed Graph\nDetect cycle in an undirected graph\nDetect cycle in a direct graph using colors\nDetect a negative cycle in a Graph | (Bellman Ford)\nCycles of length n in an undirected and connected graph\nDetecting negative cycle using Floyd Warshall\nClone a Directed Acyclic Graph\nUnion By Rank and Path Compression in Union-Find Algorithm\nIntroduction to Disjoint Set Data Structure or Union-Find Algorithm"
  },
  {
    "objectID": "coding.html#shortest-path",
    "href": "coding.html#shortest-path",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Dijkstra‚Äôs shortest path algorithm\nBellman‚ÄìFord Algorithm\nFloyd Warshall Algorithm\nJohnson‚Äôs algorithm for All-pairs shortest paths\nShortest Path in Directed Acyclic Graph\nDial‚Äôs Algorithm\nMultistage Graph (Shortest Path)\nShortest path in an unweighted graph\nKarp‚Äôs minimum mean (or average) weight cycle algorithm\n0-1 BFS (Shortest Path in a Binary Weight Graph)\nFind minimum weight cycle in an undirected graph"
  },
  {
    "objectID": "coding.html#minimum-spanning-tree",
    "href": "coding.html#minimum-spanning-tree",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Prim‚Äôs Minimum Spanning Tree (MST)\nKruskal‚Äôs Minimum Spanning Tree Algorithm\nDifference between Prim‚Äôs and Kruskal‚Äôs algorithm for MST\nApplications of Minimum Spanning Tree Problem\nMinimum cost to connect all cities\nTotal number of Spanning Trees in a Graph\nMinimum Product Spanning Tree\nReverse Delete Algorithm for Minimum Spanning Tree\nBoruvka‚Äôs algorithm for Minimum Spanning Tree"
  },
  {
    "objectID": "coding.html#topological-sorting",
    "href": "coding.html#topological-sorting",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Topological Sorting\nAll topological sorts of a Directed Acyclic Graph\nKahn‚Äôs Algorithm for Topological Sorting\nMaximum edges that can be added to DAG so that is remains DAG\nLongest Path in a Directed Acyclic Graph\nTopological Sort of a graph using departure time of vertex\nFind Itinerary from a given list of tickets"
  },
  {
    "objectID": "coding.html#connectivity-in-graph",
    "href": "coding.html#connectivity-in-graph",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Articulation Points (or Cut Vertices) in a Graph\nBiconnected Components\nBridges in a graph\nEulerian path and circuit\nFleury‚Äôs Algorithm for printing Eulerian Path or Circuit\nStrongly Connected Components\nCount all possible walks from a source to a destination with exactly k edges\nEuler Circuit in a Directed Graph\nLength of shortest chain to reach the target word\nFind if an array of strings can be chained to form a circle\nTarjan‚Äôs Algorithm to find strongly connected Components\nPaths to travel each nodes using each edge (Seven Bridges of K√∂nigsberg)\nDynamic Connectivity | Set 1 (Incremental)"
  },
  {
    "objectID": "coding.html#maximum-flow-in-graph",
    "href": "coding.html#maximum-flow-in-graph",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Max Flow Problem Introduction\nFord-Fulkerson Algorithm for Maximum Flow Problem\nFind maximum number of edge disjoint paths between two vertices\nFind minimum s-t cut in a flow network\nMaximum Bipartite Matching\nChannel Assignment Problem\nIntroduction to Push Relabel Algorithm\nKarger‚Äôs Algorithm- Set 1- Introduction and Implementation\nDinic‚Äôs algorithm for Maximum Flow"
  },
  {
    "objectID": "coding.html#important-pattern-searching-algorithms",
    "href": "coding.html#important-pattern-searching-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Naive String Matching : A Simple Algorithm that works in O(m x n) time where m is the length of the pattern and n is the length of the text.\nKnuth-Morris-Pratt (KMP) Algorithm It preprocesses pattern and works in O(m + n) Time.\nRabin-Karp Algorithm : It uses hashing to compare the pattern with the text. It works in O(m x n) Time in worst case,\nAho-Corasick Algorithm : A deterministic finite automaton (DFA) based algorithm and works in O(m + n) time."
  },
  {
    "objectID": "coding.html#learn-basics-of-pattern-searching",
    "href": "coding.html#learn-basics-of-pattern-searching",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction to Pattern Searching\nNaive Pattern Searching"
  },
  {
    "objectID": "coding.html#standard-pattern-searching-algorithms",
    "href": "coding.html#standard-pattern-searching-algorithms",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Rabin-Karp Algorithm\nKMP Algorithm\nZ algorithm\nFinite Automata\nBoyer Moore ‚Äì Bad Character Heuristic\nAho-Corasick Algorithm\nSuffix Array\nKasai‚Äôs Algorithm for LCP array from Suffix Array\nOnline algorithm for checking palindrome in a stream\nManacher‚Äôs Algorithm\nUkkonen‚Äôs Suffix Tree Construction ‚Äì Part 1\nGeneralized Suffix Tree"
  },
  {
    "objectID": "coding.html#practice-problems-on-pattern-searching",
    "href": "coding.html#practice-problems-on-pattern-searching",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Frequency of a Substring\nAnagram Substring Search\nCheck if Two Strings Rotations\nSubstrings with all Vowels\nSubstrings with only Given Character\nFind all Occurrences of a Subarray\nPattern Searching using a Trie of all Suffixes\nWildcard Pattern Matching\nRegular Expression Matching\nLongest prefix which is also suffix\nCount string in a 2D array\nFind all the patterns of ‚Äú1(0+)1‚Äù\nMax length prefix as Subsequence\nSearch a Word in a 2D Grid\nWord Search with Zig-Zag\nSuffix Tree Application 1 ‚Äì Substring Check"
  },
  {
    "objectID": "coding.html#applications-of-pattern-searching",
    "href": "coding.html#applications-of-pattern-searching",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Pattern searching algorithms have numerous applications, including:\n\nText Processing: Searching for keywords in a document, finding and replacing text, spell checking, and plagiarism detection.\nInformation Retrieval: Finding relevant documents in a database, web search, and data mining.\nBioinformatics: Searching for DNA sequences in a genome, protein analysis, and gene expression analysis.\nNetwork Security: Detecting malicious patterns in network traffic, intrusion detection, and malware analysis.\nData Mining: Identifying patterns in large datasets, customer segmentation, and fraud detection."
  },
  {
    "objectID": "coding.html#introduction-to-branch-and-bound",
    "href": "coding.html#introduction-to-branch-and-bound",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Branch and Bound meaning in DSA\nIntroduction to Branch and Bound\nDifference between Backtracking and Branch-N-Bound"
  },
  {
    "objectID": "coding.html#standard-problems-on-branch-and-bound",
    "href": "coding.html#standard-problems-on-branch-and-bound",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Branch and Bound | Set 1 (Introduction with 0/1 Knapsack)\nBranch and Bound | Set 2 (Implementation of 0/1 Knapsack)\n0/1 Knapsack using Least Cost Branch and Bound\nBranch and Bound | Set 3 (8 puzzle Problem)\nBranch and Bound | Set 5 (N Queen Problem)\nBranch And Bound | Set 6 (Traveling Salesman Problem)\nJob Assignment Problem using Branch And Bound\nTravelling Salesman Problem (TSP) using Reduced Matrix Method\nGenerate Binary Strings of length N using Branch and Bound"
  },
  {
    "objectID": "coding.html#pattern-printing",
    "href": "coding.html#pattern-printing",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Print lower triangle with alternate ‚Äò*‚Äô and ‚Äò#‚Äô\nPrint the pattern 1*2*5*6 ‚Äì3*4\nPython Program to print the pattern ‚ÄòG‚Äô\nPascal‚Äôs Triangle\nProgram to print pyramid pattern\nProgram to print the diamond shape\nHour-glass Pattern\nProgram to print V and inverted-V pattern\nProgram to print hollow pyramid, diamond pattern and their modifications\nCode to Generate the Map of India (With Explanation)"
  },
  {
    "objectID": "coding.html#lines",
    "href": "coding.html#lines",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Program to find the mid-point of a line\nSection formula (Point that divides a line in given ratio)\nProgram to find slope of a line\nProgram to find line passing through 2 Points\nProgram for Point of Intersection of Two Lines\nReflection of a point about a line in C++\nFind points at a given distance on a line of given slope\nGiven n line segments, find if any two segments intersect\nCount maximum points on same line\nMinimum lines to cover all points"
  },
  {
    "objectID": "coding.html#triangle",
    "href": "coding.html#triangle",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Check whether triangle is valid or not if sides are given\nCheck whether a given point lies inside a triangle or not\nProgram to find area of a triangle\nCheck if right triangle possible from given area and hypotenuse\nCount Integral points inside a Triangle\nFind all angles of a given triangle\nProgram to find Circumcenter of a Triangle\nNumber of Triangles that can be formed given a set of lines in Euclidean Plane\nProgram to calculate area of Circumcircle of an Equilateral Triangle\nProgram to find third side of triangle using law of cosines"
  },
  {
    "objectID": "coding.html#rectangle-square-circle",
    "href": "coding.html#rectangle-square-circle",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Check whether a given point lies inside a rectangle or not\nProgram for Area And Perimeter Of Rectangle\nFind if two rectangles overlap\nHow to check if given four points form a square\nNumber of rectangles in N*M grid\nProgram to find Circumference of a Circle\nProgram to find area of a circle\nCheck whether a point exists in circle sector or not\nCheck if two given circles touch or intersect each other\nProgram to find area of a Circular Segment\nCheck if a line touches or intersects a circle\nArea of a Circumscribed Circle of a Square\nFind minimum radius such that atleast k point lie inside the circle\nAngular Sweep (Maximum points that can be enclosed in a circle of given radius)"
  },
  {
    "objectID": "coding.html#quadrilateral",
    "href": "coding.html#quadrilateral",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Number of parallelograms when n horizontal parallel lines intersect m vertical parallellines\nProgram for Circumference of a Parallelogram\nProgram to calculate area and perimeter of Trapezium\nProgram to find area of a Trapezoid\nFind all possible coordinates of parallelogram\nMaximum area of quadrilateral\nCheck whether four points make a parallelogram\nFind the Missing Point of Parallelogram"
  },
  {
    "objectID": "coding.html#d-objects",
    "href": "coding.html#d-objects",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Find the perimeter of a cylinder\nProgram for Volume and Surface area of Frustum of Cone\nProgram to calculate volume of Ellipsoid\nProgram for volume of Pyramid\nCalculate volume and surface area of a cone\nCalculate Volume and Surface area Of Sphere\nProgram for Volume and Surface Area of Cuboid\nProgram for Volume and Surface Area of Cube\nPythagorean Quadruple\nLS3/NS3 sphere generation algorithm and its implementation"
  },
  {
    "objectID": "coding.html#polygon-and-convex-hull",
    "href": "coding.html#polygon-and-convex-hull",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "How to check if a given point lies inside or outside a polygon?\nArea of a polygon with given n ordered vertices\nTangents between two Convex Polygons\nFind number of diagonals in n sided convex polygon\nConvex Hull using Jarvis‚Äô Algorithm or Wrapping\nQuickhull Algorithm for Convex Hull\nDeleting points from Convex Hull\nMinimum area of a Polygon with three points given"
  },
  {
    "objectID": "coding.html#standard-problems-on-geometric-algorithm",
    "href": "coding.html#standard-problems-on-geometric-algorithm",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Finding the vertex, focus\nand directrix of a parabola\nFind Simple Closed Path for a given set of points\nNumber of Integral Points between Two Points\nOptimum location of point to minimize total distance\nFind perimeter of shapes formed with 1s in binary matrix\nDraw geometric shapes on images using OpenCV\nFind if it‚Äôs possible to rotate the page by an angle or not\nEquable Shapes"
  },
  {
    "objectID": "coding.html#introduction",
    "href": "coding.html#introduction",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Introduction and Analysis\nClassification and Applications\n1/2 Approximate Median Example"
  },
  {
    "objectID": "coding.html#easy-problems-3",
    "href": "coding.html#easy-problems-3",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Generates one of 3 according to given probabilities\nGenerate 0 and 1 with 25% and 75% probability\nImplement rand3() using rand2()\nBirthday Paradox\nExpected Value of an array\nShuffle a deck of cards\nGenerate CAPTCHA and verify\nIndex of max occurring with equal probability\nRandomized Binary Search"
  },
  {
    "objectID": "coding.html#medium-problems-4",
    "href": "coding.html#medium-problems-4",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Make a fair coin from a biased coin\nShuffle a given array using Fisher‚ÄìYates shuffle Algorithm\nExpected Number of Trials until Success\nStrong Password Suggester Program\nQuickSort using Random Pivoting\nOperations on Sparse Matrices\nEstimating the value of Pi using Monte Carlo\nImplement rand12() using rand6() in one line"
  },
  {
    "objectID": "coding.html#hard-problems-4",
    "href": "coding.html#hard-problems-4",
    "title": "Coding & Algorithms & Tutorials",
    "section": "",
    "text": "Generate integer from 1 to 7 with equal probability\nImplement random-0-6-Generator using the given random-0-1-Generator\nSelect a random number from stream, with O(1) space\nRandom number generator in arbitrary probability distribution fashion\nReservoir Sampling\nLinearity of Expectation\nIntroduction and implementation of Karger‚Äôs algorithm for Minimum Cut\nSelect a Random Node from a Singly Linked List\nSelect a Random Node from a tree with equal probability\nFreivald‚Äôs Algorithm to check if a matrix is product of two\nRandom Acyclic Maze Generator with given Entry and Exit point"
  },
  {
    "objectID": "index.html#projects-internships-work-experiences",
    "href": "index.html#projects-internships-work-experiences",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "AWS Security & DevSecOps Automation (View Project) - Developed an automated security monitoring system using AWS Lambda, API Gateway, and Security Hub, reducing vulnerability resolution time and improving incident response efficiency.\nML-Powered Insider Threat Detection (View Project) ‚Äì Built a machine learning-driven anomaly detection system with TensorFlow and Scikit-learn, reducing false positives by 25% and enhancing security risk assessments at UBS AG.\nIoT-Enabled Industrial Automation (View Project) ‚Äì Designed and deployed IoT cloud solutions for real-time factory monitoring, ensuring 98% uptime by integrating AWS with industrial sensors.\nSmart Farming IoT System (View Project) ‚Äì Developed an IoT-driven smart farming dashboard with real-time data visualization and cloud integration, improving operational efficiency for 50+ farm operators."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Project Internships & Work Experiences",
    "section": "",
    "text": "May 2024 ‚Äì Aug 2024\nDuring my tenure as a Cybersecurity Analyst at Hungry Hub, I played a key role in enhancing the organization‚Äôs security posture by automating security workflows, improving vulnerability management, and streamlining incident response processes. My contributions included:\nüîπ Automated Security Scanning & Vulnerability Management\n\nImplemented OWASP ZAP, GitHub Actions, and SonarQube to automate security scans for web applications and APIs.\nReduced vulnerability resolution time by 30% by integrating security checks directly into the CI/CD pipeline.\nEnsured early detection of security flaws, minimizing risks before deployment.\n\nüîπ Cloud Security & Incident Response Optimization\n\nDesigned and deployed AWS Lambda workflows to process security alerts efficiently.\nIntegrated AWS API Gateway to enable real-time event-driven security monitoring.\nImproved incident response efficiency by reducing manual investigation time and automating alert categorization.\n\nüîπ Scripting & Process Automation\n\nDeveloped Python and Shell scripts to automate repetitive security tasks, such as log analysis and report generation.\nAchieved a 10+ hours/month time savings for the security team, allowing them to focus on high-priority threats.\n\nThis role reinforced my expertise in application security, cloud security, DevSecOps practices, and automation, and I am eager to bring these skills to future opportunities."
  },
  {
    "objectID": "projects.html#cybersecurity-analyst-hungry-hub-appservation-co.-ltd.-bangkok-thailand",
    "href": "projects.html#cybersecurity-analyst-hungry-hub-appservation-co.-ltd.-bangkok-thailand",
    "title": "Project Internships & Work Experiences",
    "section": "",
    "text": "May 2024 ‚Äì Aug 2024\nDuring my tenure as a Cybersecurity Analyst at Hungry Hub, I played a key role in enhancing the organization‚Äôs security posture by automating security workflows, improving vulnerability management, and streamlining incident response processes. My contributions included:\nüîπ Automated Security Scanning & Vulnerability Management\n\nImplemented OWASP ZAP, GitHub Actions, and SonarQube to automate security scans for web applications and APIs.\nReduced vulnerability resolution time by 30% by integrating security checks directly into the CI/CD pipeline.\nEnsured early detection of security flaws, minimizing risks before deployment.\n\nüîπ Cloud Security & Incident Response Optimization\n\nDesigned and deployed AWS Lambda workflows to process security alerts efficiently.\nIntegrated AWS API Gateway to enable real-time event-driven security monitoring.\nImproved incident response efficiency by reducing manual investigation time and automating alert categorization.\n\nüîπ Scripting & Process Automation\n\nDeveloped Python and Shell scripts to automate repetitive security tasks, such as log analysis and report generation.\nAchieved a 10+ hours/month time savings for the security team, allowing them to focus on high-priority threats.\n\nThis role reinforced my expertise in application security, cloud security, DevSecOps practices, and automation, and I am eager to bring these skills to future opportunities."
  },
  {
    "objectID": "projects.html#insider-threat-risk-solution-developer-ubs-ag-singapore",
    "href": "projects.html#insider-threat-risk-solution-developer-ubs-ag-singapore",
    "title": "Project Internships & Work Experiences",
    "section": "Insider Threat Risk Solution Developer ‚Äì UBS AG, Singapore",
    "text": "Insider Threat Risk Solution Developer ‚Äì UBS AG, Singapore\n\n\n\n\n\nJan 2024 ‚Äì Apr 2024\nAs an Insider Threat Risk Solution Developer at UBS AG, I worked on building cutting-edge security solutions to detect and mitigate insider threats. My contributions focused on machine learning-driven anomaly detection, high-performance microservices, and DevSecOps automation.\nüîπ Machine Learning for Insider Threat Detection\n\nDeveloped an anomaly detection model using TensorFlow and Scikit-learn to analyze user activity logs and identify suspicious behaviors.\nReduced false positive rates by 25%, enhancing the accuracy of insider threat detection.\nImplemented advanced feature engineering techniques to extract meaningful patterns from high-volume security logs.\n\nüîπ High-Performance Microservices Development\n\nDesigned and deployed Python/Flask microservices integrated with MySQL, capable of handling 10,000+ daily transactions while maintaining 99.9% uptime.\nOptimized database queries and caching strategies to improve API response times and system reliability.\n\nüîπ CI/CD & DevSecOps Automation\n\nStreamlined the CI/CD pipeline using GitLab and Docker, reducing deployment times by 40%.\nEnsured secure and efficient deployments by implementing automated testing and vulnerability scans in the pipeline.\n\nThis role strengthened my expertise in cybersecurity, ML-driven anomaly detection, cloud-native microservices, and DevSecOps, equipping me with the skills to tackle complex security challenges in enterprise environments."
  },
  {
    "objectID": "projects.html#iot-web-development-intern-w2-industrial-services-hub-pte.-ltd.-singapore",
    "href": "projects.html#iot-web-development-intern-w2-industrial-services-hub-pte.-ltd.-singapore",
    "title": "Project Internships & Work Experiences",
    "section": "IoT & Web Development Intern ‚Äì W2 Industrial Services Hub Pte. Ltd., Singapore",
    "text": "IoT & Web Development Intern ‚Äì W2 Industrial Services Hub Pte. Ltd., Singapore\n\n\n\n\n\nAug 2020 ‚Äì Feb 2021\nDuring my internship at W2 Industrial Services Hub, I worked on IoT cloud integration, real-time data processing, and user interface development to enhance industrial automation solutions. My key contributions included:\nüîπ Cloud & IoT Integration\n\nIntegrated AWS cloud services (AWS IoT Core, Lambda, and DynamoDB) with industrial IoT hardware, ensuring 98% uptime for real-time data processing.\nDeveloped real-time data ingestion pipelines, enabling seamless communication between edge devices and cloud-based analytics.\n\nüîπ IoT Dashboard & UI Development\n\nDesigned and built user-friendly dashboards using React.js and Node.js, providing 50+ factory technicians with real-time operational insights.\nImproved data visualization and usability, allowing technicians to monitor machine performance, predict maintenance needs, and reduce downtime.\n\nThis experience strengthened my skills in IoT systems, cloud computing, full-stack web development, and industrial automation, preparing me for future roles in smart technology solutions."
  },
  {
    "objectID": "projects.html#iot-web-development-intern-singapore-indoor-farms-pte.-ltd.-singapore",
    "href": "projects.html#iot-web-development-intern-singapore-indoor-farms-pte.-ltd.-singapore",
    "title": "Project Internships & Work Experiences",
    "section": "IoT & Web Development Intern ‚Äì Singapore Indoor Farms Pte. Ltd., Singapore",
    "text": "IoT & Web Development Intern ‚Äì Singapore Indoor Farms Pte. Ltd., Singapore\n\n\n\n\n\nAug 2020 ‚Äì Feb 2021\nAt Singapore Indoor Farms, I contributed to cloud infrastructure development, data management, and web interface design to support smart farming operations. My work focused on improving connectivity, data accuracy, and user experience for precision agriculture.\nüîπ Cloud Infrastructure & IoT Integration\n\nBuilt and deployed AWS-based cloud infrastructure (AWS IoT Core, Lambda, and S3) to enable seamless connectivity between IoT sensors and factory backend systems.\nEnsured real-time data transmission, optimizing farm monitoring and automation processes.\n\nüîπ Data Management & Processing\n\nManaged large-scale agricultural datasets, implementing data cleaning and processing pipelines to ensure accuracy and reliability.\nDesigned automated data processing workflows, improving efficiency in farm operations and decision-making.\n\nüîπ Web Interface Development for Indoor Farming\n\nDeveloped an interactive web dashboard using React.js and Flask, allowing farm operators to visualize real-time sensor data and control environmental conditions remotely.\nEnhanced user experience by designing intuitive UI components for monitoring farm performance, reducing manual intervention.\n\nThis internship strengthened my skills in IoT-cloud integration, data engineering, and full-stack web development, preparing me for future roles in smart technology solutions and industrial automation."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Welcome to Haiyang‚Äôs Tech Portfolio",
    "section": "",
    "text": "Xu Haiyang\n\n\n\nHello! I‚Äôm Xu Haiyang, a Computer Science graduate specializing in Cybersecurity & Cyber-Physical Systems.\nThis website serves as a portfolio to showcase my projects, research, and technical expertise in IoT, Cybersecurity, AWS Cloud, and AI."
  },
  {
    "objectID": "ai.html#summarize-weekly-accomplishments",
    "href": "ai.html#summarize-weekly-accomplishments",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nSummarize the main achievements, challenges, and next steps from this week‚Äôs work on [project or task]. Include key technical details and highlight any roadblocks that need attention."
  },
  {
    "objectID": "ai.html#structured-report-format",
    "href": "ai.html#structured-report-format",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nCreate a detailed weekly report template for a computer scientist. It should have sections for:\n\n1. Overview\n2. Accomplishments\n3. Challenges\n4. Metrics (e.g., code commits, bug fixes)\n5. Next steps and Action Items\n\nProvide a professional tone and clear formatting."
  },
  {
    "objectID": "ai.html#translating-technical-jargon",
    "href": "ai.html#translating-technical-jargon",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nRewrite the following technical update for a non-technical audience: [insert detailed technical update]. Focus on explaining the key points in simple, concise language."
  },
  {
    "objectID": "ai.html#converting-bullet-points-to-narrative",
    "href": "ai.html#converting-bullet-points-to-narrative",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nTurn these bullet points into a well-structured weekly report:\n\n1. Completed module integration\n2. Fixed critical bugs in feature X\n3. Coordinated with the testing team\n4. Planning for performance improvements next week"
  },
  {
    "objectID": "ai.html#highlighting-key-metrics",
    "href": "ai.html#highlighting-key-metrics",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDraft a weekly report focusing on performance metrics for [specific project]. Include quantitative data (e.g., number of commits, test coverage, processing speed improvements) and interpret these metrics for stakeholders."
  },
  {
    "objectID": "ai.html#bug-fixes-system-stability",
    "href": "ai.html#bug-fixes-system-stability",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nList all critical bugs you fixed this week along with their impact on system performance. Then, summarize the overall improvement in system stability and any residual issues that need follow-up."
  },
  {
    "objectID": "ai.html#new-feature-development",
    "href": "ai.html#new-feature-development",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDraft a report outlining new features introduced during the week. Include technical details, the challenges you faced during implementation, and potential areas for further enhancement."
  },
  {
    "objectID": "ai.html#milestone-timeline",
    "href": "ai.html#milestone-timeline",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nCreate a timeline of major tasks and milestones achieved this week. For each milestone, provide a brief description of the work done, any obstacles encountered, and the expected next steps."
  },
  {
    "objectID": "ai.html#cross-team-collaboration",
    "href": "ai.html#cross-team-collaboration",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nSummarize your interactions with other teams or departments this week. Highlight the feedback received, any tasks delegated or shared, and outline any pending follow-ups that require additional coordination."
  },
  {
    "objectID": "ai.html#performance-metrics-analytics",
    "href": "ai.html#performance-metrics-analytics",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nPrepare a performance analytics report for the week. Include quantitative data such as code commits, review metrics, test coverage improvements, and any benchmark results. Interpret these metrics in a way that highlights progress and areas needing improvement."
  },
  {
    "objectID": "ai.html#learning-professional-development",
    "href": "ai.html#learning-professional-development",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDetail any new skills learned or training sessions attended during the week. Explain how these insights have been applied to current projects or how they might improve future work."
  },
  {
    "objectID": "ai.html#risk-assessment-mitigation",
    "href": "ai.html#risk-assessment-mitigation",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nIdentify any potential risks or issues encountered during the week, explain their potential impact on the project, and describe the mitigation strategies you implemented or propose for the future."
  },
  {
    "objectID": "ai.html#task-completion-overview",
    "href": "ai.html#task-completion-overview",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nSummarize all tasks and projects completed this week, including a brief note on how each task contributed to broader project milestones. Highlight any tasks that are still in progress and outline the next steps."
  },
  {
    "objectID": "ai.html#roadmap-process-update",
    "href": "ai.html#roadmap-process-update",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nUpdate your project roadmap based on this week‚Äôs progress. Identify any adjustments made to timelines or priorities, and explain the reasons behind these changes."
  },
  {
    "objectID": "ai.html#retrospective-process-improvement",
    "href": "ai.html#retrospective-process-improvement",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDraft a brief retrospective for the week: What went well? What didn‚Äôt? Include insights on how you plan to improve processes or overcome obstacles in the coming weeks."
  },
  {
    "objectID": "ai.html#project-impact-value-delivery",
    "href": "ai.html#project-impact-value-delivery",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDescribe how your work this week contributed to overall business value. Highlight any cost savings, efficiency improvements, or innovative contributions that directly support your organization‚Äôs strategic goals."
  },
  {
    "objectID": "ai.html#technical-debt-refactoring-updates",
    "href": "ai.html#technical-debt-refactoring-updates",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nSummarize the technical debt issues addressed during the week. Explain the refactoring or improvements made, and how these efforts enhance code quality and system maintainability."
  },
  {
    "objectID": "ai.html#feedback-incorporation-next-iterations",
    "href": "ai.html#feedback-incorporation-next-iterations",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDocument any feedback received from code reviews, user testing, or stakeholder meetings. Outline how you are incorporating this feedback into future iterations to improve project outcomes."
  },
  {
    "objectID": "ai.html#resource-allocation-utilization",
    "href": "ai.html#resource-allocation-utilization",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nDetail how your time and resources were distributed across different tasks this week. Include any challenges with resource constraints and describe strategies implemented to manage these effectively.\nExplanation: Provides concise historical overviews."
  },
  {
    "objectID": "ai.html#innovation-experimentation",
    "href": "ai.html#innovation-experimentation",
    "title": "20 Useful ChatGPT Commands for Research & Productivity",
    "section": "",
    "text": "Prompt:\nReport on any experimental techniques, prototypes, or innovative ideas you explored this week. Discuss their potential benefits or risks and propose actionable next steps for further investigation."
  }
]